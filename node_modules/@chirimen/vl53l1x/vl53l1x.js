// VL53L1X driver for CHIRIMEN raspberry pi3
// Long Range Laser ToF Distance Sensor
// Ported from https://github.com/pololu/vl53l1x-arduino
//
// Not VL53L0X driver
// Programmed by Satoru Takagi

/** @param {number} ms Delay for a number of milliseconds. */
const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));

var VL53L1X = function(i2cPort, slaveAddress) {
  if (!slaveAddress) {
    slaveAddress = 0x29;
  }
  this.i2cPort = i2cPort;
  this.i2cSlave = null;
  this.slaveAddress = slaveAddress;

  this.SOFT_RESET = 0x0000;
  this.I2C_SLAVE__DEVICE_ADDRESS = 0x0001;
  this.ANA_CONFIG__VHV_REF_SEL_VDDPIX = 0x0002;
  this.ANA_CONFIG__VHV_REF_SEL_VQUENCH = 0x0003;
  this.ANA_CONFIG__REG_AVDD1V2_SEL = 0x0004;
  this.ANA_CONFIG__FAST_OSC__TRIM = 0x0005;
  this.OSC_MEASURED__FAST_OSC__FREQUENCY = 0x0006;
  this.OSC_MEASURED__FAST_OSC__FREQUENCY_HI = 0x0006;
  this.OSC_MEASURED__FAST_OSC__FREQUENCY_LO = 0x0007;
  this.VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND = 0x0008;
  this.VHV_CONFIG__COUNT_THRESH = 0x0009;
  this.VHV_CONFIG__OFFSET = 0x000a;
  this.VHV_CONFIG__INIT = 0x000b;
  this.GLOBAL_CONFIG__SPAD_ENABLES_REF_0 = 0x000d;
  this.GLOBAL_CONFIG__SPAD_ENABLES_REF_1 = 0x000e;
  this.GLOBAL_CONFIG__SPAD_ENABLES_REF_2 = 0x000f;
  this.GLOBAL_CONFIG__SPAD_ENABLES_REF_3 = 0x0010;
  this.GLOBAL_CONFIG__SPAD_ENABLES_REF_4 = 0x0011;
  this.GLOBAL_CONFIG__SPAD_ENABLES_REF_5 = 0x0012;
  this.GLOBAL_CONFIG__REF_EN_START_SELECT = 0x0013;
  this.REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS = 0x0014;
  this.REF_SPAD_MAN__REF_LOCATION = 0x0015;
  this.ALGO__CROSSTALK_COMPENSATION_PLANE_OFFSET_KCPS = 0x0016;
  this.ALGO__CROSSTALK_COMPENSATION_PLANE_OFFSET_KCPS_HI = 0x0016;
  this.ALGO__CROSSTALK_COMPENSATION_PLANE_OFFSET_KCPS_LO = 0x0017;
  this.ALGO__CROSSTALK_COMPENSATION_X_PLANE_GRADIENT_KCPS = 0x0018;
  this.ALGO__CROSSTALK_COMPENSATION_X_PLANE_GRADIENT_KCPS_HI = 0x0018;
  this.ALGO__CROSSTALK_COMPENSATION_X_PLANE_GRADIENT_KCPS_LO = 0x0019;
  this.ALGO__CROSSTALK_COMPENSATION_Y_PLANE_GRADIENT_KCPS = 0x001a;
  this.ALGO__CROSSTALK_COMPENSATION_Y_PLANE_GRADIENT_KCPS_HI = 0x001a;
  this.ALGO__CROSSTALK_COMPENSATION_Y_PLANE_GRADIENT_KCPS_LO = 0x001b;
  this.REF_SPAD_CHAR__TOTAL_RATE_TARGET_MCPS = 0x001c;
  this.REF_SPAD_CHAR__TOTAL_RATE_TARGET_MCPS_HI = 0x001c;
  this.REF_SPAD_CHAR__TOTAL_RATE_TARGET_MCPS_LO = 0x001d;
  this.ALGO__PART_TO_PART_RANGE_OFFSET_MM = 0x001e;
  this.ALGO__PART_TO_PART_RANGE_OFFSET_MM_HI = 0x001e;
  this.ALGO__PART_TO_PART_RANGE_OFFSET_MM_LO = 0x001f;
  this.MM_CONFIG__INNER_OFFSET_MM = 0x0020;
  this.MM_CONFIG__INNER_OFFSET_MM_HI = 0x0020;
  this.MM_CONFIG__INNER_OFFSET_MM_LO = 0x0021;
  this.MM_CONFIG__OUTER_OFFSET_MM = 0x0022;
  this.MM_CONFIG__OUTER_OFFSET_MM_HI = 0x0022;
  this.MM_CONFIG__OUTER_OFFSET_MM_LO = 0x0023;
  this.DSS_CONFIG__TARGET_TOTAL_RATE_MCPS = 0x0024;
  this.DSS_CONFIG__TARGET_TOTAL_RATE_MCPS_HI = 0x0024;
  this.DSS_CONFIG__TARGET_TOTAL_RATE_MCPS_LO = 0x0025;
  this.DEBUG__CTRL = 0x0026;
  this.TEST_MODE__CTRL = 0x0027;
  this.CLK_GATING__CTRL = 0x0028;
  this.NVM_BIST__CTRL = 0x0029;
  this.NVM_BIST__NUM_NVM_WORDS = 0x002a;
  this.NVM_BIST__START_ADDRESS = 0x002b;
  this.HOST_IF__STATUS = 0x002c;
  this.PAD_I2C_HV__CONFIG = 0x002d;
  this.PAD_I2C_HV__EXTSUP_CONFIG = 0x002e;
  this.GPIO_HV_PAD__CTRL = 0x002f;
  this.GPIO_HV_MUX__CTRL = 0x0030;
  this.GPIO__TIO_HV_STATUS = 0x0031;
  this.GPIO__FIO_HV_STATUS = 0x0032;
  this.ANA_CONFIG__SPAD_SEL_PSWIDTH = 0x0033;
  this.ANA_CONFIG__VCSEL_PULSE_WIDTH_OFFSET = 0x0034;
  this.ANA_CONFIG__FAST_OSC__CONFIG_CTRL = 0x0035;
  this.SIGMA_ESTIMATOR__EFFECTIVE_PULSE_WIDTH_NS = 0x0036;
  this.SIGMA_ESTIMATOR__EFFECTIVE_AMBIENT_WIDTH_NS = 0x0037;
  this.SIGMA_ESTIMATOR__SIGMA_REF_MM = 0x0038;
  this.ALGO__CROSSTALK_COMPENSATION_VALID_HEIGHT_MM = 0x0039;
  this.SPARE_HOST_CONFIG__STATIC_CONFIG_SPARE_0 = 0x003a;
  this.SPARE_HOST_CONFIG__STATIC_CONFIG_SPARE_1 = 0x003b;
  this.ALGO__RANGE_IGNORE_THRESHOLD_MCPS = 0x003c;
  this.ALGO__RANGE_IGNORE_THRESHOLD_MCPS_HI = 0x003c;
  this.ALGO__RANGE_IGNORE_THRESHOLD_MCPS_LO = 0x003d;
  this.ALGO__RANGE_IGNORE_VALID_HEIGHT_MM = 0x003e;
  this.ALGO__RANGE_MIN_CLIP = 0x003f;
  this.ALGO__CONSISTENCY_CHECK__TOLERANCE = 0x0040;
  this.SPARE_HOST_CONFIG__STATIC_CONFIG_SPARE_2 = 0x0041;
  this.SD_CONFIG__RESET_STAGES_MSB = 0x0042;
  this.SD_CONFIG__RESET_STAGES_LSB = 0x0043;
  this.GPH_CONFIG__STREAM_COUNT_UPDATE_VALUE = 0x0044;
  this.GLOBAL_CONFIG__STREAM_DIVIDER = 0x0045;
  this.SYSTEM__INTERRUPT_CONFIG_GPIO = 0x0046;
  this.CAL_CONFIG__VCSEL_START = 0x0047;
  this.CAL_CONFIG__REPEAT_RATE = 0x0048;
  this.CAL_CONFIG__REPEAT_RATE_HI = 0x0048;
  this.CAL_CONFIG__REPEAT_RATE_LO = 0x0049;
  this.GLOBAL_CONFIG__VCSEL_WIDTH = 0x004a;
  this.PHASECAL_CONFIG__TIMEOUT_MACROP = 0x004b;
  this.PHASECAL_CONFIG__TARGET = 0x004c;
  this.PHASECAL_CONFIG__OVERRIDE = 0x004d;
  this.DSS_CONFIG__ROI_MODE_CONTROL = 0x004f;
  this.SYSTEM__THRESH_RATE_HIGH = 0x0050;
  this.SYSTEM__THRESH_RATE_HIGH_HI = 0x0050;
  this.SYSTEM__THRESH_RATE_HIGH_LO = 0x0051;
  this.SYSTEM__THRESH_RATE_LOW = 0x0052;
  this.SYSTEM__THRESH_RATE_LOW_HI = 0x0052;
  this.SYSTEM__THRESH_RATE_LOW_LO = 0x0053;
  this.DSS_CONFIG__MANUAL_EFFECTIVE_SPADS_SELECT = 0x0054;
  this.DSS_CONFIG__MANUAL_EFFECTIVE_SPADS_SELECT_HI = 0x0054;
  this.DSS_CONFIG__MANUAL_EFFECTIVE_SPADS_SELECT_LO = 0x0055;
  this.DSS_CONFIG__MANUAL_BLOCK_SELECT = 0x0056;
  this.DSS_CONFIG__APERTURE_ATTENUATION = 0x0057;
  this.DSS_CONFIG__MAX_SPADS_LIMIT = 0x0058;
  this.DSS_CONFIG__MIN_SPADS_LIMIT = 0x0059;
  this.MM_CONFIG__TIMEOUT_MACROP_A = 0x005a; // added by Pololu for 16-bit accesses
  this.MM_CONFIG__TIMEOUT_MACROP_A_HI = 0x005a;
  this.MM_CONFIG__TIMEOUT_MACROP_A_LO = 0x005b;
  this.MM_CONFIG__TIMEOUT_MACROP_B = 0x005c; // added by Pololu for 16-bit accesses
  this.MM_CONFIG__TIMEOUT_MACROP_B_HI = 0x005c;
  this.MM_CONFIG__TIMEOUT_MACROP_B_LO = 0x005d;
  this.RANGE_CONFIG__TIMEOUT_MACROP_A = 0x005e; // added by Pololu for 16-bit accesses
  this.RANGE_CONFIG__TIMEOUT_MACROP_A_HI = 0x005e;
  this.RANGE_CONFIG__TIMEOUT_MACROP_A_LO = 0x005f;
  this.RANGE_CONFIG__VCSEL_PERIOD_A = 0x0060;
  this.RANGE_CONFIG__TIMEOUT_MACROP_B = 0x0061; // added by Pololu for 16-bit accesses
  this.RANGE_CONFIG__TIMEOUT_MACROP_B_HI = 0x0061;
  this.RANGE_CONFIG__TIMEOUT_MACROP_B_LO = 0x0062;
  this.RANGE_CONFIG__VCSEL_PERIOD_B = 0x0063;
  this.RANGE_CONFIG__SIGMA_THRESH = 0x0064;
  this.RANGE_CONFIG__SIGMA_THRESH_HI = 0x0064;
  this.RANGE_CONFIG__SIGMA_THRESH_LO = 0x0065;
  this.RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS = 0x0066;
  this.RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS_HI = 0x0066;
  this.RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS_LO = 0x0067;
  this.RANGE_CONFIG__VALID_PHASE_LOW = 0x0068;
  this.RANGE_CONFIG__VALID_PHASE_HIGH = 0x0069;
  this.SYSTEM__INTERMEASUREMENT_PERIOD = 0x006c;
  this.SYSTEM__INTERMEASUREMENT_PERIOD_3 = 0x006c;
  this.SYSTEM__INTERMEASUREMENT_PERIOD_2 = 0x006d;
  this.SYSTEM__INTERMEASUREMENT_PERIOD_1 = 0x006e;
  this.SYSTEM__INTERMEASUREMENT_PERIOD_0 = 0x006f;
  this.SYSTEM__FRACTIONAL_ENABLE = 0x0070;
  this.SYSTEM__GROUPED_PARAMETER_HOLD_0 = 0x0071;
  this.SYSTEM__THRESH_HIGH = 0x0072;
  this.SYSTEM__THRESH_HIGH_HI = 0x0072;
  this.SYSTEM__THRESH_HIGH_LO = 0x0073;
  this.SYSTEM__THRESH_LOW = 0x0074;
  this.SYSTEM__THRESH_LOW_HI = 0x0074;
  this.SYSTEM__THRESH_LOW_LO = 0x0075;
  this.SYSTEM__ENABLE_XTALK_PER_QUADRANT = 0x0076;
  this.SYSTEM__SEED_CONFIG = 0x0077;
  this.SD_CONFIG__WOI_SD0 = 0x0078;
  this.SD_CONFIG__WOI_SD1 = 0x0079;
  this.SD_CONFIG__INITIAL_PHASE_SD0 = 0x007a;
  this.SD_CONFIG__INITIAL_PHASE_SD1 = 0x007b;
  this.SYSTEM__GROUPED_PARAMETER_HOLD_1 = 0x007c;
  this.SD_CONFIG__FIRST_ORDER_SELECT = 0x007d;
  this.SD_CONFIG__QUANTIFIER = 0x007e;
  this.ROI_CONFIG__USER_ROI_CENTRE_SPAD = 0x007f;
  this.ROI_CONFIG__USER_ROI_REQUESTED_GLOBAL_XY_SIZE = 0x0080;
  this.SYSTEM__SEQUENCE_CONFIG = 0x0081;
  this.SYSTEM__GROUPED_PARAMETER_HOLD = 0x0082;
  this.POWER_MANAGEMENT__GO1_POWER_FORCE = 0x0083;
  this.SYSTEM__STREAM_COUNT_CTRL = 0x0084;
  this.FIRMWARE__ENABLE = 0x0085;
  this.SYSTEM__INTERRUPT_CLEAR = 0x0086;
  this.SYSTEM__MODE_START = 0x0087;
  this.RESULT__INTERRUPT_STATUS = 0x0088;
  this.RESULT__RANGE_STATUS = 0x0089;
  this.RESULT__REPORT_STATUS = 0x008a;
  this.RESULT__STREAM_COUNT = 0x008b;
  this.RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD0 = 0x008c;
  this.RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD0_HI = 0x008c;
  this.RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD0_LO = 0x008d;
  this.RESULT__PEAK_SIGNAL_COUNT_RATE_MCPS_SD0 = 0x008e;
  this.RESULT__PEAK_SIGNAL_COUNT_RATE_MCPS_SD0_HI = 0x008e;
  this.RESULT__PEAK_SIGNAL_COUNT_RATE_MCPS_SD0_LO = 0x008f;
  this.RESULT__AMBIENT_COUNT_RATE_MCPS_SD0 = 0x0090;
  this.RESULT__AMBIENT_COUNT_RATE_MCPS_SD0_HI = 0x0090;
  this.RESULT__AMBIENT_COUNT_RATE_MCPS_SD0_LO = 0x0091;
  this.RESULT__SIGMA_SD0 = 0x0092;
  this.RESULT__SIGMA_SD0_HI = 0x0092;
  this.RESULT__SIGMA_SD0_LO = 0x0093;
  this.RESULT__PHASE_SD0 = 0x0094;
  this.RESULT__PHASE_SD0_HI = 0x0094;
  this.RESULT__PHASE_SD0_LO = 0x0095;
  this.RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0 = 0x0096;
  this.RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0_HI = 0x0096;
  this.RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0_LO = 0x0097;
  this.RESULT__PEAK_SIGNAL_COUNT_RATE_CROSSTALK_CORRECTED_MCPS_SD0 = 0x0098;
  this.RESULT__PEAK_SIGNAL_COUNT_RATE_CROSSTALK_CORRECTED_MCPS_SD0_HI = 0x0098;
  this.RESULT__PEAK_SIGNAL_COUNT_RATE_CROSSTALK_CORRECTED_MCPS_SD0_LO = 0x0099;
  this.RESULT__MM_INNER_ACTUAL_EFFECTIVE_SPADS_SD0 = 0x009a;
  this.RESULT__MM_INNER_ACTUAL_EFFECTIVE_SPADS_SD0_HI = 0x009a;
  this.RESULT__MM_INNER_ACTUAL_EFFECTIVE_SPADS_SD0_LO = 0x009b;
  this.RESULT__MM_OUTER_ACTUAL_EFFECTIVE_SPADS_SD0 = 0x009c;
  this.RESULT__MM_OUTER_ACTUAL_EFFECTIVE_SPADS_SD0_HI = 0x009c;
  this.RESULT__MM_OUTER_ACTUAL_EFFECTIVE_SPADS_SD0_LO = 0x009d;
  this.RESULT__AVG_SIGNAL_COUNT_RATE_MCPS_SD0 = 0x009e;
  this.RESULT__AVG_SIGNAL_COUNT_RATE_MCPS_SD0_HI = 0x009e;
  this.RESULT__AVG_SIGNAL_COUNT_RATE_MCPS_SD0_LO = 0x009f;
  this.RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD1 = 0x00a0;
  this.RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD1_HI = 0x00a0;
  this.RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD1_LO = 0x00a1;
  this.RESULT__PEAK_SIGNAL_COUNT_RATE_MCPS_SD1 = 0x00a2;
  this.RESULT__PEAK_SIGNAL_COUNT_RATE_MCPS_SD1_HI = 0x00a2;
  this.RESULT__PEAK_SIGNAL_COUNT_RATE_MCPS_SD1_LO = 0x00a3;
  this.RESULT__AMBIENT_COUNT_RATE_MCPS_SD1 = 0x00a4;
  this.RESULT__AMBIENT_COUNT_RATE_MCPS_SD1_HI = 0x00a4;
  this.RESULT__AMBIENT_COUNT_RATE_MCPS_SD1_LO = 0x00a5;
  this.RESULT__SIGMA_SD1 = 0x00a6;
  this.RESULT__SIGMA_SD1_HI = 0x00a6;
  this.RESULT__SIGMA_SD1_LO = 0x00a7;
  this.RESULT__PHASE_SD1 = 0x00a8;
  this.RESULT__PHASE_SD1_HI = 0x00a8;
  this.RESULT__PHASE_SD1_LO = 0x00a9;
  this.RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD1 = 0x00aa;
  this.RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD1_HI = 0x00aa;
  this.RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD1_LO = 0x00ab;
  this.RESULT__SPARE_0_SD1 = 0x00ac;
  this.RESULT__SPARE_0_SD1_HI = 0x00ac;
  this.RESULT__SPARE_0_SD1_LO = 0x00ad;
  this.RESULT__SPARE_1_SD1 = 0x00ae;
  this.RESULT__SPARE_1_SD1_HI = 0x00ae;
  this.RESULT__SPARE_1_SD1_LO = 0x00af;
  this.RESULT__SPARE_2_SD1 = 0x00b0;
  this.RESULT__SPARE_2_SD1_HI = 0x00b0;
  this.RESULT__SPARE_2_SD1_LO = 0x00b1;
  this.RESULT__SPARE_3_SD1 = 0x00b2;
  this.RESULT__THRESH_INFO = 0x00b3;
  this.RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD0 = 0x00b4;
  this.RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD0_3 = 0x00b4;
  this.RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD0_2 = 0x00b5;
  this.RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD0_1 = 0x00b6;
  this.RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD0_0 = 0x00b7;
  this.RESULT_CORE__RANGING_TOTAL_EVENTS_SD0 = 0x00b8;
  this.RESULT_CORE__RANGING_TOTAL_EVENTS_SD0_3 = 0x00b8;
  this.RESULT_CORE__RANGING_TOTAL_EVENTS_SD0_2 = 0x00b9;
  this.RESULT_CORE__RANGING_TOTAL_EVENTS_SD0_1 = 0x00ba;
  this.RESULT_CORE__RANGING_TOTAL_EVENTS_SD0_0 = 0x00bb;
  this.RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD0 = 0x00bc;
  this.RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD0_3 = 0x00bc;
  this.RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD0_2 = 0x00bd;
  this.RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD0_1 = 0x00be;
  this.RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD0_0 = 0x00bf;
  this.RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD0 = 0x00c0;
  this.RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD0_3 = 0x00c0;
  this.RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD0_2 = 0x00c1;
  this.RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD0_1 = 0x00c2;
  this.RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD0_0 = 0x00c3;
  this.RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD1 = 0x00c4;
  this.RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD1_3 = 0x00c4;
  this.RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD1_2 = 0x00c5;
  this.RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD1_1 = 0x00c6;
  this.RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD1_0 = 0x00c7;
  this.RESULT_CORE__RANGING_TOTAL_EVENTS_SD1 = 0x00c8;
  this.RESULT_CORE__RANGING_TOTAL_EVENTS_SD1_3 = 0x00c8;
  this.RESULT_CORE__RANGING_TOTAL_EVENTS_SD1_2 = 0x00c9;
  this.RESULT_CORE__RANGING_TOTAL_EVENTS_SD1_1 = 0x00ca;
  this.RESULT_CORE__RANGING_TOTAL_EVENTS_SD1_0 = 0x00cb;
  this.RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD1 = 0x00cc;
  this.RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD1_3 = 0x00cc;
  this.RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD1_2 = 0x00cd;
  this.RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD1_1 = 0x00ce;
  this.RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD1_0 = 0x00cf;
  this.RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD1 = 0x00d0;
  this.RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD1_3 = 0x00d0;
  this.RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD1_2 = 0x00d1;
  this.RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD1_1 = 0x00d2;
  this.RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD1_0 = 0x00d3;
  this.RESULT_CORE__SPARE_0 = 0x00d4;
  this.PHASECAL_RESULT__REFERENCE_PHASE = 0x00d6;
  this.PHASECAL_RESULT__REFERENCE_PHASE_HI = 0x00d6;
  this.PHASECAL_RESULT__REFERENCE_PHASE_LO = 0x00d7;
  this.PHASECAL_RESULT__VCSEL_START = 0x00d8;
  this.REF_SPAD_CHAR_RESULT__NUM_ACTUAL_REF_SPADS = 0x00d9;
  this.REF_SPAD_CHAR_RESULT__REF_LOCATION = 0x00da;
  this.VHV_RESULT__COLDBOOT_STATUS = 0x00db;
  this.VHV_RESULT__SEARCH_RESULT = 0x00dc;
  this.VHV_RESULT__LATEST_SETTING = 0x00dd;
  this.RESULT__OSC_CALIBRATE_VAL = 0x00de;
  this.RESULT__OSC_CALIBRATE_VAL_HI = 0x00de;
  this.RESULT__OSC_CALIBRATE_VAL_LO = 0x00df;
  this.ANA_CONFIG__POWERDOWN_GO1 = 0x00e0;
  this.ANA_CONFIG__REF_BG_CTRL = 0x00e1;
  this.ANA_CONFIG__REGDVDD1V2_CTRL = 0x00e2;
  this.ANA_CONFIG__OSC_SLOW_CTRL = 0x00e3;
  this.TEST_MODE__STATUS = 0x00e4;
  this.FIRMWARE__SYSTEM_STATUS = 0x00e5;
  this.FIRMWARE__MODE_STATUS = 0x00e6;
  this.FIRMWARE__SECONDARY_MODE_STATUS = 0x00e7;
  this.FIRMWARE__CAL_REPEAT_RATE_COUNTER = 0x00e8;
  this.FIRMWARE__CAL_REPEAT_RATE_COUNTER_HI = 0x00e8;
  this.FIRMWARE__CAL_REPEAT_RATE_COUNTER_LO = 0x00e9;
  this.FIRMWARE__HISTOGRAM_BIN = 0x00ea;
  this.GPH__SYSTEM__THRESH_HIGH = 0x00ec;
  this.GPH__SYSTEM__THRESH_HIGH_HI = 0x00ec;
  this.GPH__SYSTEM__THRESH_HIGH_LO = 0x00ed;
  this.GPH__SYSTEM__THRESH_LOW = 0x00ee;
  this.GPH__SYSTEM__THRESH_LOW_HI = 0x00ee;
  this.GPH__SYSTEM__THRESH_LOW_LO = 0x00ef;
  this.GPH__SYSTEM__ENABLE_XTALK_PER_QUADRANT = 0x00f0;
  this.GPH__SPARE_0 = 0x00f1;
  this.GPH__SD_CONFIG__WOI_SD0 = 0x00f2;
  this.GPH__SD_CONFIG__WOI_SD1 = 0x00f3;
  this.GPH__SD_CONFIG__INITIAL_PHASE_SD0 = 0x00f4;
  this.GPH__SD_CONFIG__INITIAL_PHASE_SD1 = 0x00f5;
  this.GPH__SD_CONFIG__FIRST_ORDER_SELECT = 0x00f6;
  this.GPH__SD_CONFIG__QUANTIFIER = 0x00f7;
  this.GPH__ROI_CONFIG__USER_ROI_CENTRE_SPAD = 0x00f8;
  this.GPH__ROI_CONFIG__USER_ROI_REQUESTED_GLOBAL_XY_SIZE = 0x00f9;
  this.GPH__SYSTEM__SEQUENCE_CONFIG = 0x00fa;
  this.GPH__GPH_ID = 0x00fb;
  this.SYSTEM__INTERRUPT_SET = 0x00fc;
  this.INTERRUPT_MANAGER__ENABLES = 0x00fd;
  this.INTERRUPT_MANAGER__CLEAR = 0x00fe;
  this.INTERRUPT_MANAGER__STATUS = 0x00ff;
  this.MCU_TO_HOST_BANK__WR_ACCESS_EN = 0x0100;
  this.POWER_MANAGEMENT__GO1_RESET_STATUS = 0x0101;
  this.PAD_STARTUP_MODE__VALUE_RO = 0x0102;
  this.PAD_STARTUP_MODE__VALUE_CTRL = 0x0103;
  this.PLL_PERIOD_US = 0x0104;
  this.PLL_PERIOD_US_3 = 0x0104;
  this.PLL_PERIOD_US_2 = 0x0105;
  this.PLL_PERIOD_US_1 = 0x0106;
  this.PLL_PERIOD_US_0 = 0x0107;
  this.INTERRUPT_SCHEDULER__DATA_OUT = 0x0108;
  this.INTERRUPT_SCHEDULER__DATA_OUT_3 = 0x0108;
  this.INTERRUPT_SCHEDULER__DATA_OUT_2 = 0x0109;
  this.INTERRUPT_SCHEDULER__DATA_OUT_1 = 0x010a;
  this.INTERRUPT_SCHEDULER__DATA_OUT_0 = 0x010b;
  this.NVM_BIST__COMPLETE = 0x010c;
  this.NVM_BIST__STATUS = 0x010d;
  this.IDENTIFICATION__MODEL_ID = 0x010f;
  this.IDENTIFICATION__MODULE_TYPE = 0x0110;
  this.IDENTIFICATION__REVISION_ID = 0x0111;
  this.IDENTIFICATION__MODULE_ID = 0x0112;
  this.IDENTIFICATION__MODULE_ID_HI = 0x0112;
  this.IDENTIFICATION__MODULE_ID_LO = 0x0113;
  this.ANA_CONFIG__FAST_OSC__TRIM_MAX = 0x0114;
  this.ANA_CONFIG__FAST_OSC__FREQ_SET = 0x0115;
  this.ANA_CONFIG__VCSEL_TRIM = 0x0116;
  this.ANA_CONFIG__VCSEL_SELION = 0x0117;
  this.ANA_CONFIG__VCSEL_SELION_MAX = 0x0118;
  this.PROTECTED_LASER_SAFETY__LOCK_BIT = 0x0119;
  this.LASER_SAFETY__KEY = 0x011a;
  this.LASER_SAFETY__KEY_RO = 0x011b;
  this.LASER_SAFETY__CLIP = 0x011c;
  this.LASER_SAFETY__MULT = 0x011d;
  this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_0 = 0x011e;
  this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_1 = 0x011f;
  this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_2 = 0x0120;
  this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_3 = 0x0121;
  this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_4 = 0x0122;
  this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_5 = 0x0123;
  this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_6 = 0x0124;
  this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_7 = 0x0125;
  this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_8 = 0x0126;
  this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_9 = 0x0127;
  this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_10 = 0x0128;
  this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_11 = 0x0129;
  this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_12 = 0x012a;
  this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_13 = 0x012b;
  this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_14 = 0x012c;
  this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_15 = 0x012d;
  this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_16 = 0x012e;
  this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_17 = 0x012f;
  this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_18 = 0x0130;
  this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_19 = 0x0131;
  this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_20 = 0x0132;
  this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_21 = 0x0133;
  this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_22 = 0x0134;
  this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_23 = 0x0135;
  this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_24 = 0x0136;
  this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_25 = 0x0137;
  this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_26 = 0x0138;
  this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_27 = 0x0139;
  this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_28 = 0x013a;
  this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_29 = 0x013b;
  this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_30 = 0x013c;
  this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_31 = 0x013d;
  this.ROI_CONFIG__MODE_ROI_CENTRE_SPAD = 0x013e;
  this.ROI_CONFIG__MODE_ROI_XY_SIZE = 0x013f;
  this.GO2_HOST_BANK_ACCESS__OVERRIDE = 0x0300;
  this.MCU_UTIL_MULTIPLIER__MULTIPLICAND = 0x0400;
  this.MCU_UTIL_MULTIPLIER__MULTIPLICAND_3 = 0x0400;
  this.MCU_UTIL_MULTIPLIER__MULTIPLICAND_2 = 0x0401;
  this.MCU_UTIL_MULTIPLIER__MULTIPLICAND_1 = 0x0402;
  this.MCU_UTIL_MULTIPLIER__MULTIPLICAND_0 = 0x0403;
  this.MCU_UTIL_MULTIPLIER__MULTIPLIER = 0x0404;
  this.MCU_UTIL_MULTIPLIER__MULTIPLIER_3 = 0x0404;
  this.MCU_UTIL_MULTIPLIER__MULTIPLIER_2 = 0x0405;
  this.MCU_UTIL_MULTIPLIER__MULTIPLIER_1 = 0x0406;
  this.MCU_UTIL_MULTIPLIER__MULTIPLIER_0 = 0x0407;
  this.MCU_UTIL_MULTIPLIER__PRODUCT_HI = 0x0408;
  this.MCU_UTIL_MULTIPLIER__PRODUCT_HI_3 = 0x0408;
  this.MCU_UTIL_MULTIPLIER__PRODUCT_HI_2 = 0x0409;
  this.MCU_UTIL_MULTIPLIER__PRODUCT_HI_1 = 0x040a;
  this.MCU_UTIL_MULTIPLIER__PRODUCT_HI_0 = 0x040b;
  this.MCU_UTIL_MULTIPLIER__PRODUCT_LO = 0x040c;
  this.MCU_UTIL_MULTIPLIER__PRODUCT_LO_3 = 0x040c;
  this.MCU_UTIL_MULTIPLIER__PRODUCT_LO_2 = 0x040d;
  this.MCU_UTIL_MULTIPLIER__PRODUCT_LO_1 = 0x040e;
  this.MCU_UTIL_MULTIPLIER__PRODUCT_LO_0 = 0x040f;
  this.MCU_UTIL_MULTIPLIER__START = 0x0410;
  this.MCU_UTIL_MULTIPLIER__STATUS = 0x0411;
  this.MCU_UTIL_DIVIDER__START = 0x0412;
  this.MCU_UTIL_DIVIDER__STATUS = 0x0413;
  this.MCU_UTIL_DIVIDER__DIVIDEND = 0x0414;
  this.MCU_UTIL_DIVIDER__DIVIDEND_3 = 0x0414;
  this.MCU_UTIL_DIVIDER__DIVIDEND_2 = 0x0415;
  this.MCU_UTIL_DIVIDER__DIVIDEND_1 = 0x0416;
  this.MCU_UTIL_DIVIDER__DIVIDEND_0 = 0x0417;
  this.MCU_UTIL_DIVIDER__DIVISOR = 0x0418;
  this.MCU_UTIL_DIVIDER__DIVISOR_3 = 0x0418;
  this.MCU_UTIL_DIVIDER__DIVISOR_2 = 0x0419;
  this.MCU_UTIL_DIVIDER__DIVISOR_1 = 0x041a;
  this.MCU_UTIL_DIVIDER__DIVISOR_0 = 0x041b;
  this.MCU_UTIL_DIVIDER__QUOTIENT = 0x041c;
  this.MCU_UTIL_DIVIDER__QUOTIENT_3 = 0x041c;
  this.MCU_UTIL_DIVIDER__QUOTIENT_2 = 0x041d;
  this.MCU_UTIL_DIVIDER__QUOTIENT_1 = 0x041e;
  this.MCU_UTIL_DIVIDER__QUOTIENT_0 = 0x041f;
  this.TIMER0__VALUE_IN = 0x0420;
  this.TIMER0__VALUE_IN_3 = 0x0420;
  this.TIMER0__VALUE_IN_2 = 0x0421;
  this.TIMER0__VALUE_IN_1 = 0x0422;
  this.TIMER0__VALUE_IN_0 = 0x0423;
  this.TIMER1__VALUE_IN = 0x0424;
  this.TIMER1__VALUE_IN_3 = 0x0424;
  this.TIMER1__VALUE_IN_2 = 0x0425;
  this.TIMER1__VALUE_IN_1 = 0x0426;
  this.TIMER1__VALUE_IN_0 = 0x0427;
  this.TIMER0__CTRL = 0x0428;
  this.TIMER1__CTRL = 0x0429;
  this.MCU_GENERAL_PURPOSE__GP_0 = 0x042c;
  this.MCU_GENERAL_PURPOSE__GP_1 = 0x042d;
  this.MCU_GENERAL_PURPOSE__GP_2 = 0x042e;
  this.MCU_GENERAL_PURPOSE__GP_3 = 0x042f;
  this.MCU_RANGE_CALC__CONFIG = 0x0430;
  this.MCU_RANGE_CALC__OFFSET_CORRECTED_RANGE = 0x0432;
  this.MCU_RANGE_CALC__OFFSET_CORRECTED_RANGE_HI = 0x0432;
  this.MCU_RANGE_CALC__OFFSET_CORRECTED_RANGE_LO = 0x0433;
  this.MCU_RANGE_CALC__SPARE_4 = 0x0434;
  this.MCU_RANGE_CALC__SPARE_4_3 = 0x0434;
  this.MCU_RANGE_CALC__SPARE_4_2 = 0x0435;
  this.MCU_RANGE_CALC__SPARE_4_1 = 0x0436;
  this.MCU_RANGE_CALC__SPARE_4_0 = 0x0437;
  this.MCU_RANGE_CALC__AMBIENT_DURATION_PRE_CALC = 0x0438;
  this.MCU_RANGE_CALC__AMBIENT_DURATION_PRE_CALC_HI = 0x0438;
  this.MCU_RANGE_CALC__AMBIENT_DURATION_PRE_CALC_LO = 0x0439;
  this.MCU_RANGE_CALC__ALGO_VCSEL_PERIOD = 0x043c;
  this.MCU_RANGE_CALC__SPARE_5 = 0x043d;
  this.MCU_RANGE_CALC__ALGO_TOTAL_PERIODS = 0x043e;
  this.MCU_RANGE_CALC__ALGO_TOTAL_PERIODS_HI = 0x043e;
  this.MCU_RANGE_CALC__ALGO_TOTAL_PERIODS_LO = 0x043f;
  this.MCU_RANGE_CALC__ALGO_ACCUM_PHASE = 0x0440;
  this.MCU_RANGE_CALC__ALGO_ACCUM_PHASE_3 = 0x0440;
  this.MCU_RANGE_CALC__ALGO_ACCUM_PHASE_2 = 0x0441;
  this.MCU_RANGE_CALC__ALGO_ACCUM_PHASE_1 = 0x0442;
  this.MCU_RANGE_CALC__ALGO_ACCUM_PHASE_0 = 0x0443;
  this.MCU_RANGE_CALC__ALGO_SIGNAL_EVENTS = 0x0444;
  this.MCU_RANGE_CALC__ALGO_SIGNAL_EVENTS_3 = 0x0444;
  this.MCU_RANGE_CALC__ALGO_SIGNAL_EVENTS_2 = 0x0445;
  this.MCU_RANGE_CALC__ALGO_SIGNAL_EVENTS_1 = 0x0446;
  this.MCU_RANGE_CALC__ALGO_SIGNAL_EVENTS_0 = 0x0447;
  this.MCU_RANGE_CALC__ALGO_AMBIENT_EVENTS = 0x0448;
  this.MCU_RANGE_CALC__ALGO_AMBIENT_EVENTS_3 = 0x0448;
  this.MCU_RANGE_CALC__ALGO_AMBIENT_EVENTS_2 = 0x0449;
  this.MCU_RANGE_CALC__ALGO_AMBIENT_EVENTS_1 = 0x044a;
  this.MCU_RANGE_CALC__ALGO_AMBIENT_EVENTS_0 = 0x044b;
  this.MCU_RANGE_CALC__SPARE_6 = 0x044c;
  this.MCU_RANGE_CALC__SPARE_6_HI = 0x044c;
  this.MCU_RANGE_CALC__SPARE_6_LO = 0x044d;
  this.MCU_RANGE_CALC__ALGO_ADJUST_VCSEL_PERIOD = 0x044e;
  this.MCU_RANGE_CALC__ALGO_ADJUST_VCSEL_PERIOD_HI = 0x044e;
  this.MCU_RANGE_CALC__ALGO_ADJUST_VCSEL_PERIOD_LO = 0x044f;
  this.MCU_RANGE_CALC__NUM_SPADS = 0x0450;
  this.MCU_RANGE_CALC__NUM_SPADS_HI = 0x0450;
  this.MCU_RANGE_CALC__NUM_SPADS_LO = 0x0451;
  this.MCU_RANGE_CALC__PHASE_OUTPUT = 0x0452;
  this.MCU_RANGE_CALC__PHASE_OUTPUT_HI = 0x0452;
  this.MCU_RANGE_CALC__PHASE_OUTPUT_LO = 0x0453;
  this.MCU_RANGE_CALC__RATE_PER_SPAD_MCPS = 0x0454;
  this.MCU_RANGE_CALC__RATE_PER_SPAD_MCPS_3 = 0x0454;
  this.MCU_RANGE_CALC__RATE_PER_SPAD_MCPS_2 = 0x0455;
  this.MCU_RANGE_CALC__RATE_PER_SPAD_MCPS_1 = 0x0456;
  this.MCU_RANGE_CALC__RATE_PER_SPAD_MCPS_0 = 0x0457;
  this.MCU_RANGE_CALC__SPARE_7 = 0x0458;
  this.MCU_RANGE_CALC__SPARE_8 = 0x0459;
  this.MCU_RANGE_CALC__PEAK_SIGNAL_RATE_MCPS = 0x045a;
  this.MCU_RANGE_CALC__PEAK_SIGNAL_RATE_MCPS_HI = 0x045a;
  this.MCU_RANGE_CALC__PEAK_SIGNAL_RATE_MCPS_LO = 0x045b;
  this.MCU_RANGE_CALC__AVG_SIGNAL_RATE_MCPS = 0x045c;
  this.MCU_RANGE_CALC__AVG_SIGNAL_RATE_MCPS_HI = 0x045c;
  this.MCU_RANGE_CALC__AVG_SIGNAL_RATE_MCPS_LO = 0x045d;
  this.MCU_RANGE_CALC__AMBIENT_RATE_MCPS = 0x045e;
  this.MCU_RANGE_CALC__AMBIENT_RATE_MCPS_HI = 0x045e;
  this.MCU_RANGE_CALC__AMBIENT_RATE_MCPS_LO = 0x045f;
  this.MCU_RANGE_CALC__XTALK = 0x0460;
  this.MCU_RANGE_CALC__XTALK_HI = 0x0460;
  this.MCU_RANGE_CALC__XTALK_LO = 0x0461;
  this.MCU_RANGE_CALC__CALC_STATUS = 0x0462;
  this.MCU_RANGE_CALC__DEBUG = 0x0463;
  this.MCU_RANGE_CALC__PEAK_SIGNAL_RATE_XTALK_CORR_MCPS = 0x0464;
  this.MCU_RANGE_CALC__PEAK_SIGNAL_RATE_XTALK_CORR_MCPS_HI = 0x0464;
  this.MCU_RANGE_CALC__PEAK_SIGNAL_RATE_XTALK_CORR_MCPS_LO = 0x0465;
  this.MCU_RANGE_CALC__SPARE_0 = 0x0468;
  this.MCU_RANGE_CALC__SPARE_1 = 0x0469;
  this.MCU_RANGE_CALC__SPARE_2 = 0x046a;
  this.MCU_RANGE_CALC__SPARE_3 = 0x046b;
  this.PATCH__CTRL = 0x0470;
  this.PATCH__JMP_ENABLES = 0x0472;
  this.PATCH__JMP_ENABLES_HI = 0x0472;
  this.PATCH__JMP_ENABLES_LO = 0x0473;
  this.PATCH__DATA_ENABLES = 0x0474;
  this.PATCH__DATA_ENABLES_HI = 0x0474;
  this.PATCH__DATA_ENABLES_LO = 0x0475;
  this.PATCH__OFFSET_0 = 0x0476;
  this.PATCH__OFFSET_0_HI = 0x0476;
  this.PATCH__OFFSET_0_LO = 0x0477;
  this.PATCH__OFFSET_1 = 0x0478;
  this.PATCH__OFFSET_1_HI = 0x0478;
  this.PATCH__OFFSET_1_LO = 0x0479;
  this.PATCH__OFFSET_2 = 0x047a;
  this.PATCH__OFFSET_2_HI = 0x047a;
  this.PATCH__OFFSET_2_LO = 0x047b;
  this.PATCH__OFFSET_3 = 0x047c;
  this.PATCH__OFFSET_3_HI = 0x047c;
  this.PATCH__OFFSET_3_LO = 0x047d;
  this.PATCH__OFFSET_4 = 0x047e;
  this.PATCH__OFFSET_4_HI = 0x047e;
  this.PATCH__OFFSET_4_LO = 0x047f;
  this.PATCH__OFFSET_5 = 0x0480;
  this.PATCH__OFFSET_5_HI = 0x0480;
  this.PATCH__OFFSET_5_LO = 0x0481;
  this.PATCH__OFFSET_6 = 0x0482;
  this.PATCH__OFFSET_6_HI = 0x0482;
  this.PATCH__OFFSET_6_LO = 0x0483;
  this.PATCH__OFFSET_7 = 0x0484;
  this.PATCH__OFFSET_7_HI = 0x0484;
  this.PATCH__OFFSET_7_LO = 0x0485;
  this.PATCH__OFFSET_8 = 0x0486;
  this.PATCH__OFFSET_8_HI = 0x0486;
  this.PATCH__OFFSET_8_LO = 0x0487;
  this.PATCH__OFFSET_9 = 0x0488;
  this.PATCH__OFFSET_9_HI = 0x0488;
  this.PATCH__OFFSET_9_LO = 0x0489;
  this.PATCH__OFFSET_10 = 0x048a;
  this.PATCH__OFFSET_10_HI = 0x048a;
  this.PATCH__OFFSET_10_LO = 0x048b;
  this.PATCH__OFFSET_11 = 0x048c;
  this.PATCH__OFFSET_11_HI = 0x048c;
  this.PATCH__OFFSET_11_LO = 0x048d;
  this.PATCH__OFFSET_12 = 0x048e;
  this.PATCH__OFFSET_12_HI = 0x048e;
  this.PATCH__OFFSET_12_LO = 0x048f;
  this.PATCH__OFFSET_13 = 0x0490;
  this.PATCH__OFFSET_13_HI = 0x0490;
  this.PATCH__OFFSET_13_LO = 0x0491;
  this.PATCH__OFFSET_14 = 0x0492;
  this.PATCH__OFFSET_14_HI = 0x0492;
  this.PATCH__OFFSET_14_LO = 0x0493;
  this.PATCH__OFFSET_15 = 0x0494;
  this.PATCH__OFFSET_15_HI = 0x0494;
  this.PATCH__OFFSET_15_LO = 0x0495;
  this.PATCH__ADDRESS_0 = 0x0496;
  this.PATCH__ADDRESS_0_HI = 0x0496;
  this.PATCH__ADDRESS_0_LO = 0x0497;
  this.PATCH__ADDRESS_1 = 0x0498;
  this.PATCH__ADDRESS_1_HI = 0x0498;
  this.PATCH__ADDRESS_1_LO = 0x0499;
  this.PATCH__ADDRESS_2 = 0x049a;
  this.PATCH__ADDRESS_2_HI = 0x049a;
  this.PATCH__ADDRESS_2_LO = 0x049b;
  this.PATCH__ADDRESS_3 = 0x049c;
  this.PATCH__ADDRESS_3_HI = 0x049c;
  this.PATCH__ADDRESS_3_LO = 0x049d;
  this.PATCH__ADDRESS_4 = 0x049e;
  this.PATCH__ADDRESS_4_HI = 0x049e;
  this.PATCH__ADDRESS_4_LO = 0x049f;
  this.PATCH__ADDRESS_5 = 0x04a0;
  this.PATCH__ADDRESS_5_HI = 0x04a0;
  this.PATCH__ADDRESS_5_LO = 0x04a1;
  this.PATCH__ADDRESS_6 = 0x04a2;
  this.PATCH__ADDRESS_6_HI = 0x04a2;
  this.PATCH__ADDRESS_6_LO = 0x04a3;
  this.PATCH__ADDRESS_7 = 0x04a4;
  this.PATCH__ADDRESS_7_HI = 0x04a4;
  this.PATCH__ADDRESS_7_LO = 0x04a5;
  this.PATCH__ADDRESS_8 = 0x04a6;
  this.PATCH__ADDRESS_8_HI = 0x04a6;
  this.PATCH__ADDRESS_8_LO = 0x04a7;
  this.PATCH__ADDRESS_9 = 0x04a8;
  this.PATCH__ADDRESS_9_HI = 0x04a8;
  this.PATCH__ADDRESS_9_LO = 0x04a9;
  this.PATCH__ADDRESS_10 = 0x04aa;
  this.PATCH__ADDRESS_10_HI = 0x04aa;
  this.PATCH__ADDRESS_10_LO = 0x04ab;
  this.PATCH__ADDRESS_11 = 0x04ac;
  this.PATCH__ADDRESS_11_HI = 0x04ac;
  this.PATCH__ADDRESS_11_LO = 0x04ad;
  this.PATCH__ADDRESS_12 = 0x04ae;
  this.PATCH__ADDRESS_12_HI = 0x04ae;
  this.PATCH__ADDRESS_12_LO = 0x04af;
  this.PATCH__ADDRESS_13 = 0x04b0;
  this.PATCH__ADDRESS_13_HI = 0x04b0;
  this.PATCH__ADDRESS_13_LO = 0x04b1;
  this.PATCH__ADDRESS_14 = 0x04b2;
  this.PATCH__ADDRESS_14_HI = 0x04b2;
  this.PATCH__ADDRESS_14_LO = 0x04b3;
  this.PATCH__ADDRESS_15 = 0x04b4;
  this.PATCH__ADDRESS_15_HI = 0x04b4;
  this.PATCH__ADDRESS_15_LO = 0x04b5;
  this.SPI_ASYNC_MUX__CTRL = 0x04c0;
  this.CLK__CONFIG = 0x04c4;
  this.GPIO_LV_MUX__CTRL = 0x04cc;
  this.GPIO_LV_PAD__CTRL = 0x04cd;
  this.PAD_I2C_LV__CONFIG = 0x04d0;
  this.PAD_STARTUP_MODE__VALUE_RO_GO1 = 0x04d4;
  this.HOST_IF__STATUS_GO1 = 0x04d5;
  this.MCU_CLK_GATING__CTRL = 0x04d8;
  this.TEST__BIST_ROM_CTRL = 0x04e0;
  this.TEST__BIST_ROM_RESULT = 0x04e1;
  this.TEST__BIST_ROM_MCU_SIG = 0x04e2;
  this.TEST__BIST_ROM_MCU_SIG_HI = 0x04e2;
  this.TEST__BIST_ROM_MCU_SIG_LO = 0x04e3;
  this.TEST__BIST_RAM_CTRL = 0x04e4;
  this.TEST__BIST_RAM_RESULT = 0x04e5;
  this.TEST__TMC = 0x04e8;
  this.TEST__PLL_BIST_MIN_THRESHOLD = 0x04f0;
  this.TEST__PLL_BIST_MIN_THRESHOLD_HI = 0x04f0;
  this.TEST__PLL_BIST_MIN_THRESHOLD_LO = 0x04f1;
  this.TEST__PLL_BIST_MAX_THRESHOLD = 0x04f2;
  this.TEST__PLL_BIST_MAX_THRESHOLD_HI = 0x04f2;
  this.TEST__PLL_BIST_MAX_THRESHOLD_LO = 0x04f3;
  this.TEST__PLL_BIST_COUNT_OUT = 0x04f4;
  this.TEST__PLL_BIST_COUNT_OUT_HI = 0x04f4;
  this.TEST__PLL_BIST_COUNT_OUT_LO = 0x04f5;
  this.TEST__PLL_BIST_GONOGO = 0x04f6;
  this.TEST__PLL_BIST_CTRL = 0x04f7;
  this.RANGING_CORE__DEVICE_ID = 0x0680;
  this.RANGING_CORE__REVISION_ID = 0x0681;
  this.RANGING_CORE__CLK_CTRL1 = 0x0683;
  this.RANGING_CORE__CLK_CTRL2 = 0x0684;
  this.RANGING_CORE__WOI_1 = 0x0685;
  this.RANGING_CORE__WOI_REF_1 = 0x0686;
  this.RANGING_CORE__START_RANGING = 0x0687;
  this.RANGING_CORE__LOW_LIMIT_1 = 0x0690;
  this.RANGING_CORE__HIGH_LIMIT_1 = 0x0691;
  this.RANGING_CORE__LOW_LIMIT_REF_1 = 0x0692;
  this.RANGING_CORE__HIGH_LIMIT_REF_1 = 0x0693;
  this.RANGING_CORE__QUANTIFIER_1_MSB = 0x0694;
  this.RANGING_CORE__QUANTIFIER_1_LSB = 0x0695;
  this.RANGING_CORE__QUANTIFIER_REF_1_MSB = 0x0696;
  this.RANGING_CORE__QUANTIFIER_REF_1_LSB = 0x0697;
  this.RANGING_CORE__AMBIENT_OFFSET_1_MSB = 0x0698;
  this.RANGING_CORE__AMBIENT_OFFSET_1_LSB = 0x0699;
  this.RANGING_CORE__AMBIENT_OFFSET_REF_1_MSB = 0x069a;
  this.RANGING_CORE__AMBIENT_OFFSET_REF_1_LSB = 0x069b;
  this.RANGING_CORE__FILTER_STRENGTH_1 = 0x069c;
  this.RANGING_CORE__FILTER_STRENGTH_REF_1 = 0x069d;
  this.RANGING_CORE__SIGNAL_EVENT_LIMIT_1_MSB = 0x069e;
  this.RANGING_CORE__SIGNAL_EVENT_LIMIT_1_LSB = 0x069f;
  this.RANGING_CORE__SIGNAL_EVENT_LIMIT_REF_1_MSB = 0x06a0;
  this.RANGING_CORE__SIGNAL_EVENT_LIMIT_REF_1_LSB = 0x06a1;
  this.RANGING_CORE__TIMEOUT_OVERALL_PERIODS_MSB = 0x06a4;
  this.RANGING_CORE__TIMEOUT_OVERALL_PERIODS_LSB = 0x06a5;
  this.RANGING_CORE__INVERT_HW = 0x06a6;
  this.RANGING_CORE__FORCE_HW = 0x06a7;
  this.RANGING_CORE__STATIC_HW_VALUE = 0x06a8;
  this.RANGING_CORE__FORCE_CONTINUOUS_AMBIENT = 0x06a9;
  this.RANGING_CORE__TEST_PHASE_SELECT_TO_FILTER = 0x06aa;
  this.RANGING_CORE__TEST_PHASE_SELECT_TO_TIMING_GEN = 0x06ab;
  this.RANGING_CORE__INITIAL_PHASE_VALUE_1 = 0x06ac;
  this.RANGING_CORE__INITIAL_PHASE_VALUE_REF_1 = 0x06ad;
  this.RANGING_CORE__FORCE_UP_IN = 0x06ae;
  this.RANGING_CORE__FORCE_DN_IN = 0x06af;
  this.RANGING_CORE__STATIC_UP_VALUE_1 = 0x06b0;
  this.RANGING_CORE__STATIC_UP_VALUE_REF_1 = 0x06b1;
  this.RANGING_CORE__STATIC_DN_VALUE_1 = 0x06b2;
  this.RANGING_CORE__STATIC_DN_VALUE_REF_1 = 0x06b3;
  this.RANGING_CORE__MONITOR_UP_DN = 0x06b4;
  this.RANGING_CORE__INVERT_UP_DN = 0x06b5;
  this.RANGING_CORE__CPUMP_1 = 0x06b6;
  this.RANGING_CORE__CPUMP_2 = 0x06b7;
  this.RANGING_CORE__CPUMP_3 = 0x06b8;
  this.RANGING_CORE__OSC_1 = 0x06b9;
  this.RANGING_CORE__PLL_1 = 0x06bb;
  this.RANGING_CORE__PLL_2 = 0x06bc;
  this.RANGING_CORE__REFERENCE_1 = 0x06bd;
  this.RANGING_CORE__REFERENCE_3 = 0x06bf;
  this.RANGING_CORE__REFERENCE_4 = 0x06c0;
  this.RANGING_CORE__REFERENCE_5 = 0x06c1;
  this.RANGING_CORE__REGAVDD1V2 = 0x06c3;
  this.RANGING_CORE__CALIB_1 = 0x06c4;
  this.RANGING_CORE__CALIB_2 = 0x06c5;
  this.RANGING_CORE__CALIB_3 = 0x06c6;
  this.RANGING_CORE__TST_MUX_SEL1 = 0x06c9;
  this.RANGING_CORE__TST_MUX_SEL2 = 0x06ca;
  this.RANGING_CORE__TST_MUX = 0x06cb;
  this.RANGING_CORE__GPIO_OUT_TESTMUX = 0x06cc;
  this.RANGING_CORE__CUSTOM_FE = 0x06cd;
  this.RANGING_CORE__CUSTOM_FE_2 = 0x06ce;
  this.RANGING_CORE__SPAD_READOUT = 0x06cf;
  this.RANGING_CORE__SPAD_READOUT_1 = 0x06d0;
  this.RANGING_CORE__SPAD_READOUT_2 = 0x06d1;
  this.RANGING_CORE__SPAD_PS = 0x06d2;
  this.RANGING_CORE__LASER_SAFETY_2 = 0x06d4;
  this.RANGING_CORE__NVM_CTRL__MODE = 0x0780;
  this.RANGING_CORE__NVM_CTRL__PDN = 0x0781;
  this.RANGING_CORE__NVM_CTRL__PROGN = 0x0782;
  this.RANGING_CORE__NVM_CTRL__READN = 0x0783;
  this.RANGING_CORE__NVM_CTRL__PULSE_WIDTH_MSB = 0x0784;
  this.RANGING_CORE__NVM_CTRL__PULSE_WIDTH_LSB = 0x0785;
  this.RANGING_CORE__NVM_CTRL__HV_RISE_MSB = 0x0786;
  this.RANGING_CORE__NVM_CTRL__HV_RISE_LSB = 0x0787;
  this.RANGING_CORE__NVM_CTRL__HV_FALL_MSB = 0x0788;
  this.RANGING_CORE__NVM_CTRL__HV_FALL_LSB = 0x0789;
  this.RANGING_CORE__NVM_CTRL__TST = 0x078a;
  this.RANGING_CORE__NVM_CTRL__TESTREAD = 0x078b;
  this.RANGING_CORE__NVM_CTRL__DATAIN_MMM = 0x078c;
  this.RANGING_CORE__NVM_CTRL__DATAIN_LMM = 0x078d;
  this.RANGING_CORE__NVM_CTRL__DATAIN_LLM = 0x078e;
  this.RANGING_CORE__NVM_CTRL__DATAIN_LLL = 0x078f;
  this.RANGING_CORE__NVM_CTRL__DATAOUT_MMM = 0x0790;
  this.RANGING_CORE__NVM_CTRL__DATAOUT_LMM = 0x0791;
  this.RANGING_CORE__NVM_CTRL__DATAOUT_LLM = 0x0792;
  this.RANGING_CORE__NVM_CTRL__DATAOUT_LLL = 0x0793;
  this.RANGING_CORE__NVM_CTRL__ADDR = 0x0794;
  this.RANGING_CORE__NVM_CTRL__DATAOUT_ECC = 0x0795;
  this.RANGING_CORE__RET_SPAD_EN_0 = 0x0796;
  this.RANGING_CORE__RET_SPAD_EN_1 = 0x0797;
  this.RANGING_CORE__RET_SPAD_EN_2 = 0x0798;
  this.RANGING_CORE__RET_SPAD_EN_3 = 0x0799;
  this.RANGING_CORE__RET_SPAD_EN_4 = 0x079a;
  this.RANGING_CORE__RET_SPAD_EN_5 = 0x079b;
  this.RANGING_CORE__RET_SPAD_EN_6 = 0x079c;
  this.RANGING_CORE__RET_SPAD_EN_7 = 0x079d;
  this.RANGING_CORE__RET_SPAD_EN_8 = 0x079e;
  this.RANGING_CORE__RET_SPAD_EN_9 = 0x079f;
  this.RANGING_CORE__RET_SPAD_EN_10 = 0x07a0;
  this.RANGING_CORE__RET_SPAD_EN_11 = 0x07a1;
  this.RANGING_CORE__RET_SPAD_EN_12 = 0x07a2;
  this.RANGING_CORE__RET_SPAD_EN_13 = 0x07a3;
  this.RANGING_CORE__RET_SPAD_EN_14 = 0x07a4;
  this.RANGING_CORE__RET_SPAD_EN_15 = 0x07a5;
  this.RANGING_CORE__RET_SPAD_EN_16 = 0x07a6;
  this.RANGING_CORE__RET_SPAD_EN_17 = 0x07a7;
  this.RANGING_CORE__SPAD_SHIFT_EN = 0x07ba;
  this.RANGING_CORE__SPAD_DISABLE_CTRL = 0x07bb;
  this.RANGING_CORE__SPAD_EN_SHIFT_OUT_DEBUG = 0x07bc;
  this.RANGING_CORE__SPI_MODE = 0x07bd;
  this.RANGING_CORE__GPIO_DIR = 0x07be;
  this.RANGING_CORE__VCSEL_PERIOD = 0x0880;
  this.RANGING_CORE__VCSEL_START = 0x0881;
  this.RANGING_CORE__VCSEL_STOP = 0x0882;
  this.RANGING_CORE__VCSEL_1 = 0x0885;
  this.RANGING_CORE__VCSEL_STATUS = 0x088d;
  this.RANGING_CORE__STATUS = 0x0980;
  this.RANGING_CORE__LASER_CONTINUITY_STATE = 0x0981;
  this.RANGING_CORE__RANGE_1_MMM = 0x0982;
  this.RANGING_CORE__RANGE_1_LMM = 0x0983;
  this.RANGING_CORE__RANGE_1_LLM = 0x0984;
  this.RANGING_CORE__RANGE_1_LLL = 0x0985;
  this.RANGING_CORE__RANGE_REF_1_MMM = 0x0986;
  this.RANGING_CORE__RANGE_REF_1_LMM = 0x0987;
  this.RANGING_CORE__RANGE_REF_1_LLM = 0x0988;
  this.RANGING_CORE__RANGE_REF_1_LLL = 0x0989;
  this.RANGING_CORE__AMBIENT_WINDOW_EVENTS_1_MMM = 0x098a;
  this.RANGING_CORE__AMBIENT_WINDOW_EVENTS_1_LMM = 0x098b;
  this.RANGING_CORE__AMBIENT_WINDOW_EVENTS_1_LLM = 0x098c;
  this.RANGING_CORE__AMBIENT_WINDOW_EVENTS_1_LLL = 0x098d;
  this.RANGING_CORE__RANGING_TOTAL_EVENTS_1_MMM = 0x098e;
  this.RANGING_CORE__RANGING_TOTAL_EVENTS_1_LMM = 0x098f;
  this.RANGING_CORE__RANGING_TOTAL_EVENTS_1_LLM = 0x0990;
  this.RANGING_CORE__RANGING_TOTAL_EVENTS_1_LLL = 0x0991;
  this.RANGING_CORE__SIGNAL_TOTAL_EVENTS_1_MMM = 0x0992;
  this.RANGING_CORE__SIGNAL_TOTAL_EVENTS_1_LMM = 0x0993;
  this.RANGING_CORE__SIGNAL_TOTAL_EVENTS_1_LLM = 0x0994;
  this.RANGING_CORE__SIGNAL_TOTAL_EVENTS_1_LLL = 0x0995;
  this.RANGING_CORE__TOTAL_PERIODS_ELAPSED_1_MM = 0x0996;
  this.RANGING_CORE__TOTAL_PERIODS_ELAPSED_1_LM = 0x0997;
  this.RANGING_CORE__TOTAL_PERIODS_ELAPSED_1_LL = 0x0998;
  this.RANGING_CORE__AMBIENT_MISMATCH_MM = 0x0999;
  this.RANGING_CORE__AMBIENT_MISMATCH_LM = 0x099a;
  this.RANGING_CORE__AMBIENT_MISMATCH_LL = 0x099b;
  this.RANGING_CORE__AMBIENT_WINDOW_EVENTS_REF_1_MMM = 0x099c;
  this.RANGING_CORE__AMBIENT_WINDOW_EVENTS_REF_1_LMM = 0x099d;
  this.RANGING_CORE__AMBIENT_WINDOW_EVENTS_REF_1_LLM = 0x099e;
  this.RANGING_CORE__AMBIENT_WINDOW_EVENTS_REF_1_LLL = 0x099f;
  this.RANGING_CORE__RANGING_TOTAL_EVENTS_REF_1_MMM = 0x09a0;
  this.RANGING_CORE__RANGING_TOTAL_EVENTS_REF_1_LMM = 0x09a1;
  this.RANGING_CORE__RANGING_TOTAL_EVENTS_REF_1_LLM = 0x09a2;
  this.RANGING_CORE__RANGING_TOTAL_EVENTS_REF_1_LLL = 0x09a3;
  this.RANGING_CORE__SIGNAL_TOTAL_EVENTS_REF_1_MMM = 0x09a4;
  this.RANGING_CORE__SIGNAL_TOTAL_EVENTS_REF_1_LMM = 0x09a5;
  this.RANGING_CORE__SIGNAL_TOTAL_EVENTS_REF_1_LLM = 0x09a6;
  this.RANGING_CORE__SIGNAL_TOTAL_EVENTS_REF_1_LLL = 0x09a7;
  this.RANGING_CORE__TOTAL_PERIODS_ELAPSED_REF_1_MM = 0x09a8;
  this.RANGING_CORE__TOTAL_PERIODS_ELAPSED_REF_1_LM = 0x09a9;
  this.RANGING_CORE__TOTAL_PERIODS_ELAPSED_REF_1_LL = 0x09aa;
  this.RANGING_CORE__AMBIENT_MISMATCH_REF_MM = 0x09ab;
  this.RANGING_CORE__AMBIENT_MISMATCH_REF_LM = 0x09ac;
  this.RANGING_CORE__AMBIENT_MISMATCH_REF_LL = 0x09ad;
  this.RANGING_CORE__GPIO_CONFIG__A0 = 0x0a00;
  this.RANGING_CORE__RESET_CONTROL__A0 = 0x0a01;
  this.RANGING_CORE__INTR_MANAGER__A0 = 0x0a02;
  this.RANGING_CORE__POWER_FSM_TIME_OSC__A0 = 0x0a06;
  this.RANGING_CORE__VCSEL_ATEST__A0 = 0x0a07;
  this.RANGING_CORE__VCSEL_PERIOD_CLIPPED__A0 = 0x0a08;
  this.RANGING_CORE__VCSEL_STOP_CLIPPED__A0 = 0x0a09;
  this.RANGING_CORE__CALIB_2__A0 = 0x0a0a;
  this.RANGING_CORE__STOP_CONDITION__A0 = 0x0a0b;
  this.RANGING_CORE__STATUS_RESET__A0 = 0x0a0c;
  this.RANGING_CORE__READOUT_CFG__A0 = 0x0a0d;
  this.RANGING_CORE__WINDOW_SETTING__A0 = 0x0a0e;
  this.RANGING_CORE__VCSEL_DELAY__A0 = 0x0a1a;
  this.RANGING_CORE__REFERENCE_2__A0 = 0x0a1b;
  this.RANGING_CORE__REGAVDD1V2__A0 = 0x0a1d;
  this.RANGING_CORE__TST_MUX__A0 = 0x0a1f;
  this.RANGING_CORE__CUSTOM_FE_2__A0 = 0x0a20;
  this.RANGING_CORE__SPAD_READOUT__A0 = 0x0a21;
  this.RANGING_CORE__CPUMP_1__A0 = 0x0a22;
  this.RANGING_CORE__SPARE_REGISTER__A0 = 0x0a23;
  this.RANGING_CORE__VCSEL_CONT_STAGE5_BYPASS__A0 = 0x0a24;
  this.RANGING_CORE__RET_SPAD_EN_18 = 0x0a25;
  this.RANGING_CORE__RET_SPAD_EN_19 = 0x0a26;
  this.RANGING_CORE__RET_SPAD_EN_20 = 0x0a27;
  this.RANGING_CORE__RET_SPAD_EN_21 = 0x0a28;
  this.RANGING_CORE__RET_SPAD_EN_22 = 0x0a29;
  this.RANGING_CORE__RET_SPAD_EN_23 = 0x0a2a;
  this.RANGING_CORE__RET_SPAD_EN_24 = 0x0a2b;
  this.RANGING_CORE__RET_SPAD_EN_25 = 0x0a2c;
  this.RANGING_CORE__RET_SPAD_EN_26 = 0x0a2d;
  this.RANGING_CORE__RET_SPAD_EN_27 = 0x0a2e;
  this.RANGING_CORE__RET_SPAD_EN_28 = 0x0a2f;
  this.RANGING_CORE__RET_SPAD_EN_29 = 0x0a30;
  this.RANGING_CORE__RET_SPAD_EN_30 = 0x0a31;
  this.RANGING_CORE__RET_SPAD_EN_31 = 0x0a32;
  this.RANGING_CORE__REF_SPAD_EN_0__EWOK = 0x0a33;
  this.RANGING_CORE__REF_SPAD_EN_1__EWOK = 0x0a34;
  this.RANGING_CORE__REF_SPAD_EN_2__EWOK = 0x0a35;
  this.RANGING_CORE__REF_SPAD_EN_3__EWOK = 0x0a36;
  this.RANGING_CORE__REF_SPAD_EN_4__EWOK = 0x0a37;
  this.RANGING_CORE__REF_SPAD_EN_5__EWOK = 0x0a38;
  this.RANGING_CORE__REF_EN_START_SELECT = 0x0a39;
  this.RANGING_CORE__REGDVDD1V2_ATEST__EWOK = 0x0a41;
  this.SOFT_RESET_GO1 = 0x0b00;
  this.PRIVATE__PATCH_BASE_ADDR_RSLV = 0x0e00;
  this.PREV_SHADOW_RESULT__INTERRUPT_STATUS = 0x0ed0;
  this.PREV_SHADOW_RESULT__RANGE_STATUS = 0x0ed1;
  this.PREV_SHADOW_RESULT__REPORT_STATUS = 0x0ed2;
  this.PREV_SHADOW_RESULT__STREAM_COUNT = 0x0ed3;
  this.PREV_SHADOW_RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD0 = 0x0ed4;
  this.PREV_SHADOW_RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD0_HI = 0x0ed4;
  this.PREV_SHADOW_RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD0_LO = 0x0ed5;
  this.PREV_SHADOW_RESULT__PEAK_SIGNAL_COUNT_RATE_MCPS_SD0 = 0x0ed6;
  this.PREV_SHADOW_RESULT__PEAK_SIGNAL_COUNT_RATE_MCPS_SD0_HI = 0x0ed6;
  this.PREV_SHADOW_RESULT__PEAK_SIGNAL_COUNT_RATE_MCPS_SD0_LO = 0x0ed7;
  this.PREV_SHADOW_RESULT__AMBIENT_COUNT_RATE_MCPS_SD0 = 0x0ed8;
  this.PREV_SHADOW_RESULT__AMBIENT_COUNT_RATE_MCPS_SD0_HI = 0x0ed8;
  this.PREV_SHADOW_RESULT__AMBIENT_COUNT_RATE_MCPS_SD0_LO = 0x0ed9;
  this.PREV_SHADOW_RESULT__SIGMA_SD0 = 0x0eda;
  this.PREV_SHADOW_RESULT__SIGMA_SD0_HI = 0x0eda;
  this.PREV_SHADOW_RESULT__SIGMA_SD0_LO = 0x0edb;
  this.PREV_SHADOW_RESULT__PHASE_SD0 = 0x0edc;
  this.PREV_SHADOW_RESULT__PHASE_SD0_HI = 0x0edc;
  this.PREV_SHADOW_RESULT__PHASE_SD0_LO = 0x0edd;
  this.PREV_SHADOW_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0 = 0x0ede;
  this.PREV_SHADOW_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0_HI = 0x0ede;
  this.PREV_SHADOW_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0_LO = 0x0edf;
  this.PREV_SHADOW_RESULT__PEAK_SIGNAL_COUNT_RATE_CROSSTALK_CORRECTED_MCPS_SD0 = 0x0ee0;
  this.PREV_SHADOW_RESULT__PEAK_SIGNAL_COUNT_RATE_CROSSTALK_CORRECTED_MCPS_SD0_HI = 0x0ee0;
  this.PREV_SHADOW_RESULT__PEAK_SIGNAL_COUNT_RATE_CROSSTALK_CORRECTED_MCPS_SD0_LO = 0x0ee1;
  this.PREV_SHADOW_RESULT__MM_INNER_ACTUAL_EFFECTIVE_SPADS_SD0 = 0x0ee2;
  this.PREV_SHADOW_RESULT__MM_INNER_ACTUAL_EFFECTIVE_SPADS_SD0_HI = 0x0ee2;
  this.PREV_SHADOW_RESULT__MM_INNER_ACTUAL_EFFECTIVE_SPADS_SD0_LO = 0x0ee3;
  this.PREV_SHADOW_RESULT__MM_OUTER_ACTUAL_EFFECTIVE_SPADS_SD0 = 0x0ee4;
  this.PREV_SHADOW_RESULT__MM_OUTER_ACTUAL_EFFECTIVE_SPADS_SD0_HI = 0x0ee4;
  this.PREV_SHADOW_RESULT__MM_OUTER_ACTUAL_EFFECTIVE_SPADS_SD0_LO = 0x0ee5;
  this.PREV_SHADOW_RESULT__AVG_SIGNAL_COUNT_RATE_MCPS_SD0 = 0x0ee6;
  this.PREV_SHADOW_RESULT__AVG_SIGNAL_COUNT_RATE_MCPS_SD0_HI = 0x0ee6;
  this.PREV_SHADOW_RESULT__AVG_SIGNAL_COUNT_RATE_MCPS_SD0_LO = 0x0ee7;
  this.PREV_SHADOW_RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD1 = 0x0ee8;
  this.PREV_SHADOW_RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD1_HI = 0x0ee8;
  this.PREV_SHADOW_RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD1_LO = 0x0ee9;
  this.PREV_SHADOW_RESULT__PEAK_SIGNAL_COUNT_RATE_MCPS_SD1 = 0x0eea;
  this.PREV_SHADOW_RESULT__PEAK_SIGNAL_COUNT_RATE_MCPS_SD1_HI = 0x0eea;
  this.PREV_SHADOW_RESULT__PEAK_SIGNAL_COUNT_RATE_MCPS_SD1_LO = 0x0eeb;
  this.PREV_SHADOW_RESULT__AMBIENT_COUNT_RATE_MCPS_SD1 = 0x0eec;
  this.PREV_SHADOW_RESULT__AMBIENT_COUNT_RATE_MCPS_SD1_HI = 0x0eec;
  this.PREV_SHADOW_RESULT__AMBIENT_COUNT_RATE_MCPS_SD1_LO = 0x0eed;
  this.PREV_SHADOW_RESULT__SIGMA_SD1 = 0x0eee;
  this.PREV_SHADOW_RESULT__SIGMA_SD1_HI = 0x0eee;
  this.PREV_SHADOW_RESULT__SIGMA_SD1_LO = 0x0eef;
  this.PREV_SHADOW_RESULT__PHASE_SD1 = 0x0ef0;
  this.PREV_SHADOW_RESULT__PHASE_SD1_HI = 0x0ef0;
  this.PREV_SHADOW_RESULT__PHASE_SD1_LO = 0x0ef1;
  this.PREV_SHADOW_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD1 = 0x0ef2;
  this.PREV_SHADOW_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD1_HI = 0x0ef2;
  this.PREV_SHADOW_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD1_LO = 0x0ef3;
  this.PREV_SHADOW_RESULT__SPARE_0_SD1 = 0x0ef4;
  this.PREV_SHADOW_RESULT__SPARE_0_SD1_HI = 0x0ef4;
  this.PREV_SHADOW_RESULT__SPARE_0_SD1_LO = 0x0ef5;
  this.PREV_SHADOW_RESULT__SPARE_1_SD1 = 0x0ef6;
  this.PREV_SHADOW_RESULT__SPARE_1_SD1_HI = 0x0ef6;
  this.PREV_SHADOW_RESULT__SPARE_1_SD1_LO = 0x0ef7;
  this.PREV_SHADOW_RESULT__SPARE_2_SD1 = 0x0ef8;
  this.PREV_SHADOW_RESULT__SPARE_2_SD1_HI = 0x0ef8;
  this.PREV_SHADOW_RESULT__SPARE_2_SD1_LO = 0x0ef9;
  this.PREV_SHADOW_RESULT__SPARE_3_SD1 = 0x0efa;
  this.PREV_SHADOW_RESULT__SPARE_3_SD1_HI = 0x0efa;
  this.PREV_SHADOW_RESULT__SPARE_3_SD1_LO = 0x0efb;
  this.PREV_SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD0 = 0x0efc;
  this.PREV_SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD0_3 = 0x0efc;
  this.PREV_SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD0_2 = 0x0efd;
  this.PREV_SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD0_1 = 0x0efe;
  this.PREV_SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD0_0 = 0x0eff;
  this.PREV_SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD0 = 0x0f00;
  this.PREV_SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD0_3 = 0x0f00;
  this.PREV_SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD0_2 = 0x0f01;
  this.PREV_SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD0_1 = 0x0f02;
  this.PREV_SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD0_0 = 0x0f03;
  this.PREV_SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD0 = 0x0f04;
  this.PREV_SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD0_3 = 0x0f04;
  this.PREV_SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD0_2 = 0x0f05;
  this.PREV_SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD0_1 = 0x0f06;
  this.PREV_SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD0_0 = 0x0f07;
  this.PREV_SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD0 = 0x0f08;
  this.PREV_SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD0_3 = 0x0f08;
  this.PREV_SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD0_2 = 0x0f09;
  this.PREV_SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD0_1 = 0x0f0a;
  this.PREV_SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD0_0 = 0x0f0b;
  this.PREV_SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD1 = 0x0f0c;
  this.PREV_SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD1_3 = 0x0f0c;
  this.PREV_SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD1_2 = 0x0f0d;
  this.PREV_SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD1_1 = 0x0f0e;
  this.PREV_SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD1_0 = 0x0f0f;
  this.PREV_SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD1 = 0x0f10;
  this.PREV_SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD1_3 = 0x0f10;
  this.PREV_SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD1_2 = 0x0f11;
  this.PREV_SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD1_1 = 0x0f12;
  this.PREV_SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD1_0 = 0x0f13;
  this.PREV_SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD1 = 0x0f14;
  this.PREV_SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD1_3 = 0x0f14;
  this.PREV_SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD1_2 = 0x0f15;
  this.PREV_SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD1_1 = 0x0f16;
  this.PREV_SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD1_0 = 0x0f17;
  this.PREV_SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD1 = 0x0f18;
  this.PREV_SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD1_3 = 0x0f18;
  this.PREV_SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD1_2 = 0x0f19;
  this.PREV_SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD1_1 = 0x0f1a;
  this.PREV_SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD1_0 = 0x0f1b;
  this.PREV_SHADOW_RESULT_CORE__SPARE_0 = 0x0f1c;
  this.RESULT__DEBUG_STATUS = 0x0f20;
  this.RESULT__DEBUG_STAGE = 0x0f21;
  this.GPH__SYSTEM__THRESH_RATE_HIGH = 0x0f24;
  this.GPH__SYSTEM__THRESH_RATE_HIGH_HI = 0x0f24;
  this.GPH__SYSTEM__THRESH_RATE_HIGH_LO = 0x0f25;
  this.GPH__SYSTEM__THRESH_RATE_LOW = 0x0f26;
  this.GPH__SYSTEM__THRESH_RATE_LOW_HI = 0x0f26;
  this.GPH__SYSTEM__THRESH_RATE_LOW_LO = 0x0f27;
  this.GPH__SYSTEM__INTERRUPT_CONFIG_GPIO = 0x0f28;
  this.GPH__DSS_CONFIG__ROI_MODE_CONTROL = 0x0f2f;
  this.GPH__DSS_CONFIG__MANUAL_EFFECTIVE_SPADS_SELECT = 0x0f30;
  this.GPH__DSS_CONFIG__MANUAL_EFFECTIVE_SPADS_SELECT_HI = 0x0f30;
  this.GPH__DSS_CONFIG__MANUAL_EFFECTIVE_SPADS_SELECT_LO = 0x0f31;
  this.GPH__DSS_CONFIG__MANUAL_BLOCK_SELECT = 0x0f32;
  this.GPH__DSS_CONFIG__MAX_SPADS_LIMIT = 0x0f33;
  this.GPH__DSS_CONFIG__MIN_SPADS_LIMIT = 0x0f34;
  this.GPH__MM_CONFIG__TIMEOUT_MACROP_A_HI = 0x0f36;
  this.GPH__MM_CONFIG__TIMEOUT_MACROP_A_LO = 0x0f37;
  this.GPH__MM_CONFIG__TIMEOUT_MACROP_B_HI = 0x0f38;
  this.GPH__MM_CONFIG__TIMEOUT_MACROP_B_LO = 0x0f39;
  this.GPH__RANGE_CONFIG__TIMEOUT_MACROP_A_HI = 0x0f3a;
  this.GPH__RANGE_CONFIG__TIMEOUT_MACROP_A_LO = 0x0f3b;
  this.GPH__RANGE_CONFIG__VCSEL_PERIOD_A = 0x0f3c;
  this.GPH__RANGE_CONFIG__VCSEL_PERIOD_B = 0x0f3d;
  this.GPH__RANGE_CONFIG__TIMEOUT_MACROP_B_HI = 0x0f3e;
  this.GPH__RANGE_CONFIG__TIMEOUT_MACROP_B_LO = 0x0f3f;
  this.GPH__RANGE_CONFIG__SIGMA_THRESH = 0x0f40;
  this.GPH__RANGE_CONFIG__SIGMA_THRESH_HI = 0x0f40;
  this.GPH__RANGE_CONFIG__SIGMA_THRESH_LO = 0x0f41;
  this.GPH__RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS = 0x0f42;
  this.GPH__RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS_HI = 0x0f42;
  this.GPH__RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS_LO = 0x0f43;
  this.GPH__RANGE_CONFIG__VALID_PHASE_LOW = 0x0f44;
  this.GPH__RANGE_CONFIG__VALID_PHASE_HIGH = 0x0f45;
  this.FIRMWARE__INTERNAL_STREAM_COUNT_DIV = 0x0f46;
  this.FIRMWARE__INTERNAL_STREAM_COUNTER_VAL = 0x0f47;
  this.DSS_CALC__ROI_CTRL = 0x0f54;
  this.DSS_CALC__SPARE_1 = 0x0f55;
  this.DSS_CALC__SPARE_2 = 0x0f56;
  this.DSS_CALC__SPARE_3 = 0x0f57;
  this.DSS_CALC__SPARE_4 = 0x0f58;
  this.DSS_CALC__SPARE_5 = 0x0f59;
  this.DSS_CALC__SPARE_6 = 0x0f5a;
  this.DSS_CALC__SPARE_7 = 0x0f5b;
  this.DSS_CALC__USER_ROI_SPAD_EN_0 = 0x0f5c;
  this.DSS_CALC__USER_ROI_SPAD_EN_1 = 0x0f5d;
  this.DSS_CALC__USER_ROI_SPAD_EN_2 = 0x0f5e;
  this.DSS_CALC__USER_ROI_SPAD_EN_3 = 0x0f5f;
  this.DSS_CALC__USER_ROI_SPAD_EN_4 = 0x0f60;
  this.DSS_CALC__USER_ROI_SPAD_EN_5 = 0x0f61;
  this.DSS_CALC__USER_ROI_SPAD_EN_6 = 0x0f62;
  this.DSS_CALC__USER_ROI_SPAD_EN_7 = 0x0f63;
  this.DSS_CALC__USER_ROI_SPAD_EN_8 = 0x0f64;
  this.DSS_CALC__USER_ROI_SPAD_EN_9 = 0x0f65;
  this.DSS_CALC__USER_ROI_SPAD_EN_10 = 0x0f66;
  this.DSS_CALC__USER_ROI_SPAD_EN_11 = 0x0f67;
  this.DSS_CALC__USER_ROI_SPAD_EN_12 = 0x0f68;
  this.DSS_CALC__USER_ROI_SPAD_EN_13 = 0x0f69;
  this.DSS_CALC__USER_ROI_SPAD_EN_14 = 0x0f6a;
  this.DSS_CALC__USER_ROI_SPAD_EN_15 = 0x0f6b;
  this.DSS_CALC__USER_ROI_SPAD_EN_16 = 0x0f6c;
  this.DSS_CALC__USER_ROI_SPAD_EN_17 = 0x0f6d;
  this.DSS_CALC__USER_ROI_SPAD_EN_18 = 0x0f6e;
  this.DSS_CALC__USER_ROI_SPAD_EN_19 = 0x0f6f;
  this.DSS_CALC__USER_ROI_SPAD_EN_20 = 0x0f70;
  this.DSS_CALC__USER_ROI_SPAD_EN_21 = 0x0f71;
  this.DSS_CALC__USER_ROI_SPAD_EN_22 = 0x0f72;
  this.DSS_CALC__USER_ROI_SPAD_EN_23 = 0x0f73;
  this.DSS_CALC__USER_ROI_SPAD_EN_24 = 0x0f74;
  this.DSS_CALC__USER_ROI_SPAD_EN_25 = 0x0f75;
  this.DSS_CALC__USER_ROI_SPAD_EN_26 = 0x0f76;
  this.DSS_CALC__USER_ROI_SPAD_EN_27 = 0x0f77;
  this.DSS_CALC__USER_ROI_SPAD_EN_28 = 0x0f78;
  this.DSS_CALC__USER_ROI_SPAD_EN_29 = 0x0f79;
  this.DSS_CALC__USER_ROI_SPAD_EN_30 = 0x0f7a;
  this.DSS_CALC__USER_ROI_SPAD_EN_31 = 0x0f7b;
  this.DSS_CALC__USER_ROI_0 = 0x0f7c;
  this.DSS_CALC__USER_ROI_1 = 0x0f7d;
  this.DSS_CALC__MODE_ROI_0 = 0x0f7e;
  this.DSS_CALC__MODE_ROI_1 = 0x0f7f;
  this.SIGMA_ESTIMATOR_CALC__SPARE_0 = 0x0f80;
  this.VHV_RESULT__PEAK_SIGNAL_RATE_MCPS = 0x0f82;
  this.VHV_RESULT__PEAK_SIGNAL_RATE_MCPS_HI = 0x0f82;
  this.VHV_RESULT__PEAK_SIGNAL_RATE_MCPS_LO = 0x0f83;
  this.VHV_RESULT__SIGNAL_TOTAL_EVENTS_REF = 0x0f84;
  this.VHV_RESULT__SIGNAL_TOTAL_EVENTS_REF_3 = 0x0f84;
  this.VHV_RESULT__SIGNAL_TOTAL_EVENTS_REF_2 = 0x0f85;
  this.VHV_RESULT__SIGNAL_TOTAL_EVENTS_REF_1 = 0x0f86;
  this.VHV_RESULT__SIGNAL_TOTAL_EVENTS_REF_0 = 0x0f87;
  this.PHASECAL_RESULT__PHASE_OUTPUT_REF = 0x0f88;
  this.PHASECAL_RESULT__PHASE_OUTPUT_REF_HI = 0x0f88;
  this.PHASECAL_RESULT__PHASE_OUTPUT_REF_LO = 0x0f89;
  this.DSS_RESULT__TOTAL_RATE_PER_SPAD = 0x0f8a;
  this.DSS_RESULT__TOTAL_RATE_PER_SPAD_HI = 0x0f8a;
  this.DSS_RESULT__TOTAL_RATE_PER_SPAD_LO = 0x0f8b;
  this.DSS_RESULT__ENABLED_BLOCKS = 0x0f8c;
  this.DSS_RESULT__NUM_REQUESTED_SPADS = 0x0f8e;
  this.DSS_RESULT__NUM_REQUESTED_SPADS_HI = 0x0f8e;
  this.DSS_RESULT__NUM_REQUESTED_SPADS_LO = 0x0f8f;
  this.MM_RESULT__INNER_INTERSECTION_RATE = 0x0f92;
  this.MM_RESULT__INNER_INTERSECTION_RATE_HI = 0x0f92;
  this.MM_RESULT__INNER_INTERSECTION_RATE_LO = 0x0f93;
  this.MM_RESULT__OUTER_COMPLEMENT_RATE = 0x0f94;
  this.MM_RESULT__OUTER_COMPLEMENT_RATE_HI = 0x0f94;
  this.MM_RESULT__OUTER_COMPLEMENT_RATE_LO = 0x0f95;
  this.MM_RESULT__TOTAL_OFFSET = 0x0f96;
  this.MM_RESULT__TOTAL_OFFSET_HI = 0x0f96;
  this.MM_RESULT__TOTAL_OFFSET_LO = 0x0f97;
  this.XTALK_CALC__XTALK_FOR_ENABLED_SPADS = 0x0f98;
  this.XTALK_CALC__XTALK_FOR_ENABLED_SPADS_3 = 0x0f98;
  this.XTALK_CALC__XTALK_FOR_ENABLED_SPADS_2 = 0x0f99;
  this.XTALK_CALC__XTALK_FOR_ENABLED_SPADS_1 = 0x0f9a;
  this.XTALK_CALC__XTALK_FOR_ENABLED_SPADS_0 = 0x0f9b;
  this.XTALK_RESULT__AVG_XTALK_USER_ROI_KCPS = 0x0f9c;
  this.XTALK_RESULT__AVG_XTALK_USER_ROI_KCPS_3 = 0x0f9c;
  this.XTALK_RESULT__AVG_XTALK_USER_ROI_KCPS_2 = 0x0f9d;
  this.XTALK_RESULT__AVG_XTALK_USER_ROI_KCPS_1 = 0x0f9e;
  this.XTALK_RESULT__AVG_XTALK_USER_ROI_KCPS_0 = 0x0f9f;
  this.XTALK_RESULT__AVG_XTALK_MM_INNER_ROI_KCPS = 0x0fa0;
  this.XTALK_RESULT__AVG_XTALK_MM_INNER_ROI_KCPS_3 = 0x0fa0;
  this.XTALK_RESULT__AVG_XTALK_MM_INNER_ROI_KCPS_2 = 0x0fa1;
  this.XTALK_RESULT__AVG_XTALK_MM_INNER_ROI_KCPS_1 = 0x0fa2;
  this.XTALK_RESULT__AVG_XTALK_MM_INNER_ROI_KCPS_0 = 0x0fa3;
  this.XTALK_RESULT__AVG_XTALK_MM_OUTER_ROI_KCPS = 0x0fa4;
  this.XTALK_RESULT__AVG_XTALK_MM_OUTER_ROI_KCPS_3 = 0x0fa4;
  this.XTALK_RESULT__AVG_XTALK_MM_OUTER_ROI_KCPS_2 = 0x0fa5;
  this.XTALK_RESULT__AVG_XTALK_MM_OUTER_ROI_KCPS_1 = 0x0fa6;
  this.XTALK_RESULT__AVG_XTALK_MM_OUTER_ROI_KCPS_0 = 0x0fa7;
  this.RANGE_RESULT__ACCUM_PHASE = 0x0fa8;
  this.RANGE_RESULT__ACCUM_PHASE_3 = 0x0fa8;
  this.RANGE_RESULT__ACCUM_PHASE_2 = 0x0fa9;
  this.RANGE_RESULT__ACCUM_PHASE_1 = 0x0faa;
  this.RANGE_RESULT__ACCUM_PHASE_0 = 0x0fab;
  this.RANGE_RESULT__OFFSET_CORRECTED_RANGE = 0x0fac;
  this.RANGE_RESULT__OFFSET_CORRECTED_RANGE_HI = 0x0fac;
  this.RANGE_RESULT__OFFSET_CORRECTED_RANGE_LO = 0x0fad;
  this.SHADOW_PHASECAL_RESULT__VCSEL_START = 0x0fae;
  this.SHADOW_RESULT__INTERRUPT_STATUS = 0x0fb0;
  this.SHADOW_RESULT__RANGE_STATUS = 0x0fb1;
  this.SHADOW_RESULT__REPORT_STATUS = 0x0fb2;
  this.SHADOW_RESULT__STREAM_COUNT = 0x0fb3;
  this.SHADOW_RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD0 = 0x0fb4;
  this.SHADOW_RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD0_HI = 0x0fb4;
  this.SHADOW_RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD0_LO = 0x0fb5;
  this.SHADOW_RESULT__PEAK_SIGNAL_COUNT_RATE_MCPS_SD0 = 0x0fb6;
  this.SHADOW_RESULT__PEAK_SIGNAL_COUNT_RATE_MCPS_SD0_HI = 0x0fb6;
  this.SHADOW_RESULT__PEAK_SIGNAL_COUNT_RATE_MCPS_SD0_LO = 0x0fb7;
  this.SHADOW_RESULT__AMBIENT_COUNT_RATE_MCPS_SD0 = 0x0fb8;
  this.SHADOW_RESULT__AMBIENT_COUNT_RATE_MCPS_SD0_HI = 0x0fb8;
  this.SHADOW_RESULT__AMBIENT_COUNT_RATE_MCPS_SD0_LO = 0x0fb9;
  this.SHADOW_RESULT__SIGMA_SD0 = 0x0fba;
  this.SHADOW_RESULT__SIGMA_SD0_HI = 0x0fba;
  this.SHADOW_RESULT__SIGMA_SD0_LO = 0x0fbb;
  this.SHADOW_RESULT__PHASE_SD0 = 0x0fbc;
  this.SHADOW_RESULT__PHASE_SD0_HI = 0x0fbc;
  this.SHADOW_RESULT__PHASE_SD0_LO = 0x0fbd;
  this.SHADOW_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0 = 0x0fbe;
  this.SHADOW_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0_HI = 0x0fbe;
  this.SHADOW_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0_LO = 0x0fbf;
  this.SHADOW_RESULT__PEAK_SIGNAL_COUNT_RATE_CROSSTALK_CORRECTED_MCPS_SD0 = 0x0fc0;
  this.SHADOW_RESULT__PEAK_SIGNAL_COUNT_RATE_CROSSTALK_CORRECTED_MCPS_SD0_HI = 0x0fc0;
  this.SHADOW_RESULT__PEAK_SIGNAL_COUNT_RATE_CROSSTALK_CORRECTED_MCPS_SD0_LO = 0x0fc1;
  this.SHADOW_RESULT__MM_INNER_ACTUAL_EFFECTIVE_SPADS_SD0 = 0x0fc2;
  this.SHADOW_RESULT__MM_INNER_ACTUAL_EFFECTIVE_SPADS_SD0_HI = 0x0fc2;
  this.SHADOW_RESULT__MM_INNER_ACTUAL_EFFECTIVE_SPADS_SD0_LO = 0x0fc3;
  this.SHADOW_RESULT__MM_OUTER_ACTUAL_EFFECTIVE_SPADS_SD0 = 0x0fc4;
  this.SHADOW_RESULT__MM_OUTER_ACTUAL_EFFECTIVE_SPADS_SD0_HI = 0x0fc4;
  this.SHADOW_RESULT__MM_OUTER_ACTUAL_EFFECTIVE_SPADS_SD0_LO = 0x0fc5;
  this.SHADOW_RESULT__AVG_SIGNAL_COUNT_RATE_MCPS_SD0 = 0x0fc6;
  this.SHADOW_RESULT__AVG_SIGNAL_COUNT_RATE_MCPS_SD0_HI = 0x0fc6;
  this.SHADOW_RESULT__AVG_SIGNAL_COUNT_RATE_MCPS_SD0_LO = 0x0fc7;
  this.SHADOW_RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD1 = 0x0fc8;
  this.SHADOW_RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD1_HI = 0x0fc8;
  this.SHADOW_RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD1_LO = 0x0fc9;
  this.SHADOW_RESULT__PEAK_SIGNAL_COUNT_RATE_MCPS_SD1 = 0x0fca;
  this.SHADOW_RESULT__PEAK_SIGNAL_COUNT_RATE_MCPS_SD1_HI = 0x0fca;
  this.SHADOW_RESULT__PEAK_SIGNAL_COUNT_RATE_MCPS_SD1_LO = 0x0fcb;
  this.SHADOW_RESULT__AMBIENT_COUNT_RATE_MCPS_SD1 = 0x0fcc;
  this.SHADOW_RESULT__AMBIENT_COUNT_RATE_MCPS_SD1_HI = 0x0fcc;
  this.SHADOW_RESULT__AMBIENT_COUNT_RATE_MCPS_SD1_LO = 0x0fcd;
  this.SHADOW_RESULT__SIGMA_SD1 = 0x0fce;
  this.SHADOW_RESULT__SIGMA_SD1_HI = 0x0fce;
  this.SHADOW_RESULT__SIGMA_SD1_LO = 0x0fcf;
  this.SHADOW_RESULT__PHASE_SD1 = 0x0fd0;
  this.SHADOW_RESULT__PHASE_SD1_HI = 0x0fd0;
  this.SHADOW_RESULT__PHASE_SD1_LO = 0x0fd1;
  this.SHADOW_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD1 = 0x0fd2;
  this.SHADOW_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD1_HI = 0x0fd2;
  this.SHADOW_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD1_LO = 0x0fd3;
  this.SHADOW_RESULT__SPARE_0_SD1 = 0x0fd4;
  this.SHADOW_RESULT__SPARE_0_SD1_HI = 0x0fd4;
  this.SHADOW_RESULT__SPARE_0_SD1_LO = 0x0fd5;
  this.SHADOW_RESULT__SPARE_1_SD1 = 0x0fd6;
  this.SHADOW_RESULT__SPARE_1_SD1_HI = 0x0fd6;
  this.SHADOW_RESULT__SPARE_1_SD1_LO = 0x0fd7;
  this.SHADOW_RESULT__SPARE_2_SD1 = 0x0fd8;
  this.SHADOW_RESULT__SPARE_2_SD1_HI = 0x0fd8;
  this.SHADOW_RESULT__SPARE_2_SD1_LO = 0x0fd9;
  this.SHADOW_RESULT__SPARE_3_SD1 = 0x0fda;
  this.SHADOW_RESULT__THRESH_INFO = 0x0fdb;
  this.SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD0 = 0x0fdc;
  this.SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD0_3 = 0x0fdc;
  this.SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD0_2 = 0x0fdd;
  this.SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD0_1 = 0x0fde;
  this.SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD0_0 = 0x0fdf;
  this.SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD0 = 0x0fe0;
  this.SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD0_3 = 0x0fe0;
  this.SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD0_2 = 0x0fe1;
  this.SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD0_1 = 0x0fe2;
  this.SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD0_0 = 0x0fe3;
  this.SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD0 = 0x0fe4;
  this.SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD0_3 = 0x0fe4;
  this.SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD0_2 = 0x0fe5;
  this.SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD0_1 = 0x0fe6;
  this.SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD0_0 = 0x0fe7;
  this.SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD0 = 0x0fe8;
  this.SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD0_3 = 0x0fe8;
  this.SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD0_2 = 0x0fe9;
  this.SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD0_1 = 0x0fea;
  this.SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD0_0 = 0x0feb;
  this.SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD1 = 0x0fec;
  this.SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD1_3 = 0x0fec;
  this.SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD1_2 = 0x0fed;
  this.SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD1_1 = 0x0fee;
  this.SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD1_0 = 0x0fef;
  this.SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD1 = 0x0ff0;
  this.SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD1_3 = 0x0ff0;
  this.SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD1_2 = 0x0ff1;
  this.SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD1_1 = 0x0ff2;
  this.SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD1_0 = 0x0ff3;
  this.SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD1 = 0x0ff4;
  this.SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD1_3 = 0x0ff4;
  this.SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD1_2 = 0x0ff5;
  this.SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD1_1 = 0x0ff6;
  this.SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD1_0 = 0x0ff7;
  this.SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD1 = 0x0ff8;
  this.SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD1_3 = 0x0ff8;
  this.SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD1_2 = 0x0ff9;
  this.SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD1_1 = 0x0ffa;
  this.SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD1_0 = 0x0ffb;
  this.SHADOW_RESULT_CORE__SPARE_0 = 0x0ffc;
  this.SHADOW_PHASECAL_RESULT__REFERENCE_PHASE_HI = 0x0ffe;
  this.SHADOW_PHASECAL_RESULT__REFERENCE_PHASE_LO = 0x0fff;

  this.TargetRate = 0x0a00;
  this.TimingGuard = 4528;
  this.calibrated = false;
  this.saved_vhv_init = 0;
  this.saved_vhv_timeout = 0;
  this.distance_mode = "Unknown";
  this.results = {};
  this.ranging_data = {};
};

VL53L1X.prototype = {
  init: async function(mode, io_2v8) {
    this.i2cSlave = await this.i2cPort.open(this.slaveAddress);
    await sleep(10);
    if ((await this.readReg16Bit(this.IDENTIFICATION__MODEL_ID)) != 0xeacc) {
      throw new Error("Failed to find expected ID register values. Check wiring!");
    }

    // VL53L1_software_reset() begin
    await this.writeReg(this.SOFT_RESET, 0x00);
    await sleep(10);
    await this.writeReg(this.SOFT_RESET, 0x01);
    await sleep(100);

    /**
		while(true){
			var fstat = await this.readReg(this.FIRMWARE__SYSTEM_STATUS);
			console.log("fstat:",fstat);
			if ((fstat & 0x01) != 0){
				console.log("FIRMWARE__SYSTEM_STATUS OK");
				break;
			}
			await sleep(10);
		}
		**/
    // VL53L1_poll_for_boot_completion() end

    // VL53L1_software_reset() end

    // VL53L1_DataInit() begin
    if (io_2v8) {
      await this.writeReg(
        this.PAD_I2C_HV__EXTSUP_CONFIG,
        (await this.readReg(this.PAD_I2C_HV__EXTSUP_CONFIG)) | 0x01
      );
    }

    // store oscillator info for later use
    this.fast_osc_frequency = await this.readReg16Bit(
      this.OSC_MEASURED__FAST_OSC__FREQUENCY
    );
    this.osc_calibrate_val = await this.readReg16Bit(
      this.RESULT__OSC_CALIBRATE_VAL
    );

    // VL53L1_DataInit() end

    // VL53L1_StaticInit() begin

    // Note that the API does not actually apply the configuration settings below
    // when VL53L1_StaticInit() is called: it keeps a copy of the sensor's
    // register contents in memory and doesn't actually write them until a
    // measurement is started. Writing the configuration here means we don't have
    // to keep it all in memory and avoids a lot of redundant writes later.

    // the API sets the preset mode to LOWPOWER_AUTONOMOUS here:
    // VL53L1_set_preset_mode() begin

    // VL53L1_preset_mode_standard_ranging() begin

    // values labeled "tuning parm default" are from vl53l1_tuning_parm_defaults.h
    // (API uses these in VL53L1_init_tuning_parm_storage_struct())

    // static config
    // API resets PAD_I2C_HV__EXTSUP_CONFIG here, but maybe we don't want to do
    // that? (seems like it would disable 2V8 mode)
    await this.writeReg16Bit(
      this.DSS_CONFIG__TARGET_TOTAL_RATE_MCPS,
      this.TargetRate
    ); // should already be this value after reset
    await this.writeReg(this.GPIO__TIO_HV_STATUS, 0x02);
    await this.writeReg(this.SIGMA_ESTIMATOR__EFFECTIVE_PULSE_WIDTH_NS, 8); // tuning parm default
    await this.writeReg(this.SIGMA_ESTIMATOR__EFFECTIVE_AMBIENT_WIDTH_NS, 16); // tuning parm default
    await this.writeReg(
      this.ALGO__CROSSTALK_COMPENSATION_VALID_HEIGHT_MM,
      0x01
    );
    await this.writeReg(this.ALGO__RANGE_IGNORE_VALID_HEIGHT_MM, 0xff);
    await this.writeReg(this.ALGO__RANGE_MIN_CLIP, 0); // tuning parm default
    await this.writeReg(this.ALGO__CONSISTENCY_CHECK__TOLERANCE, 2); // tuning parm default

    // general config
    await this.writeReg16Bit(this.SYSTEM__THRESH_RATE_HIGH, 0x0000);
    await this.writeReg16Bit(this.SYSTEM__THRESH_RATE_LOW, 0x0000);
    await this.writeReg(this.DSS_CONFIG__APERTURE_ATTENUATION, 0x38);

    // timing config
    // most of these settings will be determined later by distance and timing
    // budget configuration
    await this.writeReg16Bit(this.RANGE_CONFIG__SIGMA_THRESH, 360); // tuning parm default
    await this.writeReg16Bit(
      this.RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS,
      192
    ); // tuning parm default

    // dynamic config

    await this.writeReg(this.SYSTEM__GROUPED_PARAMETER_HOLD_0, 0x01);
    await this.writeReg(this.SYSTEM__GROUPED_PARAMETER_HOLD_1, 0x01);
    await this.writeReg(this.SD_CONFIG__QUANTIFIER, 2); // tuning parm default

    // VL53L1_preset_mode_standard_ranging() end

    // from VL53L1_preset_mode_timed_ranging_*
    // GPH is 0 after reset, but writing GPH0 and GPH1 above seem to set GPH to 1,
    // and things don't seem to work if we don't set GPH back to 0 (which the API
    // does here).
    await this.writeReg(this.SYSTEM__GROUPED_PARAMETER_HOLD, 0x00);
    await this.writeReg(this.SYSTEM__SEED_CONFIG, 1); // tuning parm default

    // from VL53L1_config_low_power_auto_mode
    await this.writeReg(this.SYSTEM__SEQUENCE_CONFIG, 0x8b); // VHV, PHASECAL, DSS1, RANGE
    await this.writeReg16Bit(
      this.DSS_CONFIG__MANUAL_EFFECTIVE_SPADS_SELECT,
      200 << 8
    );
    await this.writeReg(this.DSS_CONFIG__ROI_MODE_CONTROL, 2); // REQUESTED_EFFFECTIVE_SPADS

    // VL53L1_set_preset_mode() end

    // default to long range, 50 ms timing budget
    // note that this is different than what the API defaults to
    if (!mode) {
      mode = "medium";
    } else {
      mode = mode.toLowerCase();
      if (!(mode == "long" || mode == "medium" || mode == "short")) {
        mode = "medium";
      }
    }
    await this.setDistanceMode(mode);
    await this.setMeasurementTimingBudget(50000);

    // VL53L1_StaticInit() end

    // the API triggers this change in VL53L1_init_and_start_range() once a
    // measurement is started; assumes MM1 and MM2 are disabled
    await this.writeReg16Bit(
      this.ALGO__PART_TO_PART_RANGE_OFFSET_MM,
      (await this.readReg16Bit(this.MM_CONFIG__OUTER_OFFSET_MM)) * 4
    );

    return true;
  },

  // Start continuous ranging measurements, with the given inter-measurement
  // period in milliseconds determining how often the sensor takes a measurement.
  startContinuous: async function(period_ms) {
    if (!period_ms) {
      period_ms = 100;
    }
    // from VL53L1_set_inter_measurement_period_ms()
    await this.writeReg32Bit(
      this.SYSTEM__INTERMEASUREMENT_PERIOD,
      period_ms * this.osc_calibrate_val
    );
    await this.writeReg(this.SYSTEM__INTERRUPT_CLEAR, 0x01); // sys_interrupt_clear_range
    await this.writeReg(this.SYSTEM__MODE_START, 0x40); // mode_range__timed
  },
  // Stop continuous measurements
  // based on VL53L1_stop_range()
  stopContinuous: async function() {
    await this.writeReg(this.SYSTEM__MODE_START, 0x80); // mode_range__abort
    // VL53L1_low_power_auto_data_stop_range() begin
    this.calibrated = false;
    // "restore vhv configs"
    if (this.saved_vhv_init != 0) {
      await this.writeReg(this.VHV_CONFIG__INIT, this.saved_vhv_init);
    }
    if (this.saved_vhv_timeout != 0) {
      await this.writeReg(
        this.VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND,
        this.saved_vhv_timeout
      );
    }

    // "remove phasecal override"
    await this.writeReg(this.PHASECAL_CONFIG__OVERRIDE, 0x00);

    // VL53L1_low_power_auto_data_stop_range() end
  },
  // Returns a range reading in millimeters when continuous mode is active
  // (readRangeSingleMillimeters() also calls this function after starting a
  // single-shot range measurement)
  read: async function () {
    /**
	  if (blocking)
	  {
	    startTimeout();
	    while (!dataReady())
	    {
	      if (checkTimeoutExpired())
	      {
	        did_timeout = true;
	        ranging_data.range_status = None;
	        ranging_data.range_mm = 0;
	        ranging_data.peak_signal_count_rate_MCPS = 0;
	        ranging_data.ambient_count_rate_MCPS = 0;
	        return ranging_data.range_mm;
	      }
	    }
	  }
		**/
    await this.readResults();
    if (!this.calibrated) {
      this.setupManualCalibration();
      this.calibrated = true;
    }

    await this.updateDSS();

    await this.getRangingData();

    await this.writeReg(this.SYSTEM__INTERRUPT_CLEAR, 0x01); // sys_interrupt_clear_range

    return this.ranging_data.range_mm;
  },

  // set distance mode to Short, Medium, or Long
  // based on VL53L1_SetDistanceMode()
  setDistanceMode: async function(mode) {
    // save existing timing budget
    var budget_us = await this.getMeasurementTimingBudget();

    switch (mode) {
      case "short":
        // from VL53L1_preset_mode_standard_ranging_short_range()
        // timing config
        await this.writeReg(this.RANGE_CONFIG__VCSEL_PERIOD_A, 0x07);
        await this.writeReg(this.RANGE_CONFIG__VCSEL_PERIOD_B, 0x05);
        await this.writeReg(this.RANGE_CONFIG__VALID_PHASE_HIGH, 0x38);
        // dynamic config
        await this.writeReg(this.SD_CONFIG__WOI_SD0, 0x07);
        await this.writeReg(this.SD_CONFIG__WOI_SD1, 0x05);
        await this.writeReg(this.SD_CONFIG__INITIAL_PHASE_SD0, 6); // tuning parm default
        await this.writeReg(this.SD_CONFIG__INITIAL_PHASE_SD1, 6); // tuning parm default
        break;
      case "medium":
        // from VL53L1_preset_mode_standard_ranging()
        // timing config
        await this.writeReg(this.RANGE_CONFIG__VCSEL_PERIOD_A, 0x0b);
        await this.writeReg(this.RANGE_CONFIG__VCSEL_PERIOD_B, 0x09);
        await this.writeReg(this.RANGE_CONFIG__VALID_PHASE_HIGH, 0x78);
        // dynamic config
        await this.writeReg(this.SD_CONFIG__WOI_SD0, 0x0b);
        await this.writeReg(this.SD_CONFIG__WOI_SD1, 0x09);
        await this.writeReg(this.SD_CONFIG__INITIAL_PHASE_SD0, 10); // tuning parm default
        await this.writeReg(this.SD_CONFIG__INITIAL_PHASE_SD1, 10); // tuning parm default
        break;
      case "long": // long
        // from VL53L1_preset_mode_standard_ranging_long_range()
        // timing config
        await this.writeReg(this.RANGE_CONFIG__VCSEL_PERIOD_A, 0x0f);
        await this.writeReg(this.RANGE_CONFIG__VCSEL_PERIOD_B, 0x0d);
        await this.writeReg(this.RANGE_CONFIG__VALID_PHASE_HIGH, 0xb8);
        // dynamic config
        await this.writeReg(this.SD_CONFIG__WOI_SD0, 0x0f);
        await this.writeReg(this.SD_CONFIG__WOI_SD1, 0x0d);
        await this.writeReg(this.SD_CONFIG__INITIAL_PHASE_SD0, 14); // tuning parm default
        await this.writeReg(this.SD_CONFIG__INITIAL_PHASE_SD1, 14); // tuning parm default
        break;
      default:
        // unrecognized mode - do nothing
        return false;
    }
    // reapply timing budget
    await this.setMeasurementTimingBudget(budget_us);
    // save mode so it can be returned by getDistanceMode()
    this.distance_mode = mode;
    return true;
  },

  // Set the measurement timing budget in microseconds, which is the time allowed
  // for one measurement. A longer timing budget allows for more accurate
  // measurements.
  // based on VL53L1_SetMeasurementTimingBudgetMicroSeconds()
  setMeasurementTimingBudget: async function(budget_us) {
    // assumes PresetMode is LOWPOWER_AUTONOMOUS

    if (budget_us <= this.TimingGuard) {
      return false;
    }

    var range_config_timeout_us = (budget_us -= this.TimingGuard);
    if (range_config_timeout_us > 1100000) {
      return false;
    } // FDA_MAX_TIMING_BUDGET_US * 2

    range_config_timeout_us /= 2;

    // VL53L1_calc_timeout_register_values() begin

    var macro_period_us;

    // "Update Macro Period for Range A VCSEL Period"
    macro_period_us = this.calcMacroPeriod(
      await this.readReg(this.RANGE_CONFIG__VCSEL_PERIOD_A)
    );

    // "Update Phase timeout - uses Timing A"
    // Timeout of 1000 is tuning parm default (TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT)
    // via VL53L1_get_preset_mode_timing_cfg().
    var phasecal_timeout_mclks = this.timeoutMicrosecondsToMclks(
      1000,
      macro_period_us
    );
    if (phasecal_timeout_mclks > 0xff) {
      phasecal_timeout_mclks = 0xff;
    }
    await this.writeReg(
      this.PHASECAL_CONFIG__TIMEOUT_MACROP,
      phasecal_timeout_mclks
    );

    // "Update MM Timing A timeout"
    // Timeout of 1 is tuning parm default (LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT)
    // via VL53L1_get_preset_mode_timing_cfg(). With the API, the register
    // actually ends up with a slightly different value because it gets assigned,
    // retrieved, recalculated with a different macro period, and reassigned,
    // but it probably doesn't matter because it seems like the MM ("mode
    // mitigation"?) sequence steps are disabled in low power auto mode anyway.
    await this.writeReg16Bit(
      this.MM_CONFIG__TIMEOUT_MACROP_A,
      this.encodeTimeout(this.timeoutMicrosecondsToMclks(1, macro_period_us))
    );

    // "Update Range Timing A timeout"
    await this.writeReg16Bit(
      this.RANGE_CONFIG__TIMEOUT_MACROP_A,
      this.encodeTimeout(
        this.timeoutMicrosecondsToMclks(
          range_config_timeout_us,
          macro_period_us
        )
      )
    );

    // "Update Macro Period for Range B VCSEL Period"
    macro_period_us = this.calcMacroPeriod(
      await this.readReg(this.RANGE_CONFIG__VCSEL_PERIOD_B)
    );

    // "Update MM Timing B timeout"
    // (See earlier comment about MM Timing A timeout.)
    await this.writeReg16Bit(
      this.MM_CONFIG__TIMEOUT_MACROP_B,
      this.encodeTimeout(this.timeoutMicrosecondsToMclks(1, macro_period_us))
    );

    // "Update Range Timing B timeout"
    await this.writeReg16Bit(
      this.RANGE_CONFIG__TIMEOUT_MACROP_B,
      this.encodeTimeout(
        this.timeoutMicrosecondsToMclks(
          range_config_timeout_us,
          macro_period_us
        )
      )
    );

    // VL53L1_calc_timeout_register_values() end

    return true;
  },
  // Get the measurement timing budget in microseconds
  // based on VL53L1_SetMeasurementTimingBudgetMicroSeconds()
  getMeasurementTimingBudget: async function() {
    // assumes PresetMode is LOWPOWER_AUTONOMOUS and these sequence steps are
    // enabled: VHV, PHASECAL, DSS1, RANGE

    // VL53L1_get_timeouts_us() begin

    // "Update Macro Period for Range A VCSEL Period"
    var macro_period_us = this.calcMacroPeriod(
      await this.readReg(this.RANGE_CONFIG__VCSEL_PERIOD_A)
    );

    // "Get Range Timing A timeout"

    var range_config_timeout_us = this.timeoutMclksToMicroseconds(
      this.decodeTimeout(
        await this.readReg16Bit(this.RANGE_CONFIG__TIMEOUT_MACROP_A)
      ),
      macro_period_us
    );

    // VL53L1_get_timeouts_us() end

    return 2 * range_config_timeout_us + this.TimingGuard;
  },
  checkForDataReady: async function() {
    var IntPol = await this.getInterruptPolarity();
    var Temp = await this.readReg(this.GPIO__TIO_HV_STATUS);
    var isDataReady = (Temp & 1) == IntPol ? 1 : 0;
    return isDataReady;
  },
  getInterruptPolarity: async function() {
    var Temp = await this.readReg(this.GPIO_HV_MUX__CTRL);
    Temp = Temp & 0x10;
    var ans;
    if (Temp >> 4 == 0) {
      ans = 1;
    } else {
      ans = 0;
    }
    return ans;
  },
  clearInterrupt: async function() {
    await this.writeReg(this.SYSTEM__INTERRUPT_CLEAR, 0x01);
  },

  // Private Methods /////////////////////////////////////////////////////////////

  // "Setup ranges after the first one in low power auto mode by turning off
  // FW calibration steps and programming static values"
  // based on VL53L1_low_power_auto_setup_manual_calibration()
  setupManualCalibration: async function() {
    // "save original vhv configs"
    this.saved_vhv_init = await this.readReg(this.VHV_CONFIG__INIT);
    this.saved_vhv_timeout = await this.readReg(
      this.VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND
    );

    // "disable VHV init"
    await this.writeReg(this.VHV_CONFIG__INIT, this.saved_vhv_init & 0x7f);

    // "set loop bound to tuning param"
    await this.writeReg(
      this.VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND,
      (this.saved_vhv_timeout & 0x03) + (3 << 2)
    ); // tuning parm default (LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT)

    // "override phasecal"
    await this.writeReg(this.PHASECAL_CONFIG__OVERRIDE, 0x01);
    await this.writeReg(
      this.CAL_CONFIG__VCSEL_START,
      await this.readReg(this.PHASECAL_RESULT__VCSEL_START)
    );
  },
  // read measurement results into buffer
  readResults: async function() {
    await this.i2cSlave.writeBytes([
      this.RESULT__RANGE_STATUS >>> 8,
      this.RESULT__RANGE_STATUS & 0xff
    ]);
    var readData = await this.i2cSlave.readBytes(17);

    //  last_status = Wire.endTransmission();

    this.results.range_status = readData[0];

    readData[1]; // report_status: not used

    this.results.stream_count = readData[2];

    this.results.dss_actual_effective_spads_sd0 = readData[3] << 8; // high byte
    this.results.dss_actual_effective_spads_sd0 |= readData[4]; // low byte

    readData[5]; // peak_signal_count_rate_mcps_sd0: not used
    readData[6];

    this.results.ambient_count_rate_mcps_sd0 = readData[7] << 8; // high byte
    this.results.ambient_count_rate_mcps_sd0 |= [8]; // low byte

    readData[9]; // sigma_sd0: not used
    readData[10];

    readData[11]; // phase_sd0: not used
    readData[12];

    this.results.final_crosstalk_corrected_range_mm_sd0 = readData[13] << 8; // high byte
    this.results.final_crosstalk_corrected_range_mm_sd0 |= readData[14]; // low byte

    this.results.peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
      readData[15] << 8; // high byte
    this.results.peak_signal_count_rate_crosstalk_corrected_mcps_sd0 |=
      readData[16]; // low byte
  },
  // perform Dynamic SPAD Selection calculation/update
  // based on VL53L1_low_power_auto_update_DSS()
  updateDSS: async function() {
    var spadCount = this.results.dss_actual_effective_spads_sd0;

    if (spadCount != 0) {
      // "Calc total rate per spad"
      var totalRatePerSpad =
        this.results.peak_signal_count_rate_crosstalk_corrected_mcps_sd0 +
        this.results.ambient_count_rate_mcps_sd0;

      // "clip to 16 bits"
      if (totalRatePerSpad > 0xffff) {
        totalRatePerSpad = 0xffff;
      }

      // "shift up to take advantage of 32 bits"
      totalRatePerSpad <<= 16;

      totalRatePerSpad /= spadCount;

      if (totalRatePerSpad != 0) {
        // "get the target rate and shift up by 16"
        var requiredSpads = (this.TargetRate << 16) / totalRatePerSpad;

        // "clip to 16 bit"
        if (requiredSpads > 0xffff) {
          requiredSpads = 0xffff;
        }

        // "override DSS config"
        await this.writeReg16Bit(
          this.DSS_CONFIG__MANUAL_EFFECTIVE_SPADS_SELECT,
          requiredSpads
        );
        // DSS_CONFIG__ROI_MODE_CONTROL should already be set to REQUESTED_EFFFECTIVE_SPADS

        return;
      }
    }
    // If we reached this point, it means something above would have resulted in a
    // divide by zero.
    // "We want to gracefully set a spad target, not just exit with an error"

    // "set target to mid point"
    await this.writeReg16Bit(
      this.DSS_CONFIG__MANUAL_EFFECTIVE_SPADS_SELECT,
      0x8000
    );
  },
  // get range, status, rates from results buffer
  // based on VL53L1_GetRangingMeasurementData()
  getRangingData: function() {
    // VL53L1_copy_sys_and_core_results_to_range_results() begin

    var range = this.results.final_crosstalk_corrected_range_mm_sd0;

    // "apply correction gain"
    // gain factor of 2011 is tuning parm default (VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT)
    // Basically, this appears to scale the result by 2011/2048, or about 98%
    // (with the 1024 added for proper rounding).
    this.ranging_data.range_mm = (range * 2011 + 0x0400) / 0x0800;

    // VL53L1_copy_sys_and_core_results_to_range_results() end

    // set range_status in ranging_data based on value of RESULT__RANGE_STATUS register
    // mostly based on ConvertStatusLite()
    switch (this.results.range_status) {
      case 17: // MULTCLIPFAIL
      case 2: // VCSELWATCHDOGTESTFAILURE
      case 1: // VCSELCONTINUITYTESTFAILURE
      case 3: // NOVHVVALUEFOUND
        // from SetSimpleData()
        this.ranging_data.range_status = "HardwareFail";
        break;
      case 13: // USERROICLIP
        // from SetSimpleData()
        this.ranging_data.range_status = "MinRangeFail";
        break;
      case 18: // GPHSTREAMCOUNT0READY
        this.ranging_data.range_status = "SynchronizationInt";
        break;
      case 5: // RANGEPHASECHECK
        this.ranging_data.range_status = "OutOfBoundsFail";
        break;
      case 4: // MSRCNOTARGET
        this.ranging_data.range_status = "SignalFail";
        break;
      case 6: // SIGMATHRESHOLDCHECK
        this.ranging_data.range_status = "SignalFail";
        break;
      case 7: // PHASECONSISTENCY
        this.ranging_data.range_status = "WrapTargetFail";
        break;
      case 12: // RANGEIGNORETHRESHOLD
        this.ranging_data.range_status = "XtalkSignalFail";
        break;
      case 8: // MINCLIP
        this.ranging_data.range_status = "RangeValidMinRangeClipped";
        break;
      case 9: // RANGECOMPLETE
        // from VL53L1_copy_sys_and_core_results_to_range_results()
        if (this.results.stream_count == 0) {
          this.ranging_data.range_status = "RangeValidNoWrapCheckFail";
        } else {
          this.ranging_data.range_status = "RangeValid";
        }
        break;
      default:
        this.ranging_data.range_status = "None";
    }
    // from SetSimpleData()
    this.ranging_data.peak_signal_count_rate_MCPS = this.countRateFixedToFloat(
      this.results.peak_signal_count_rate_crosstalk_corrected_mcps_sd0
    );
    this.ranging_data.ambient_count_rate_MCPS = this.countRateFixedToFloat(
      this.results.ambient_count_rate_mcps_sd0
    );
  },
  // Decode sequence step timeout in MCLKs from register value
  // based on VL53L1_decode_timeout()
  decodeTimeout: function(reg_val) {
    return ((reg_val & 0xff) << (reg_val >> 8)) + 1;
  },
  // Encode sequence step timeout register value from timeout in MCLKs
  // based on VL53L1_encode_timeout()
  encodeTimeout: function(timeout_mclks) {
    // encoded format: "(LSByte * 2^MSByte) + 1"
    var ls_byte = 0;
    var ms_byte = 0;

    if (timeout_mclks > 0) {
      ls_byte = timeout_mclks - 1;
      while ((ls_byte & 0xffffff00) > 0) {
        ls_byte >>= 1;
        ms_byte++;
      }
      return (ms_byte << 8) | (ls_byte & 0xff);
    } else {
      return 0;
    }
  },

  // Convert sequence step timeout from macro periods to microseconds with given
  // macro period in microseconds (12.12 format)
  // based on VL53L1_calc_timeout_us()
  timeoutMclksToMicroseconds: function(timeout_mclks, macro_period_us) {
    return (timeout_mclks * macro_period_us + 0x800) >> 12;
  },
  // Convert sequence step timeout from microseconds to macro periods with given
  // macro period in microseconds (12.12 format)
  // based on VL53L1_calc_timeout_mclks()
  timeoutMicrosecondsToMclks: function(timeout_us, macro_period_us) {
    return ((timeout_us << 12) + (macro_period_us >> 1)) / macro_period_us;
  },
  // Calculate macro period in microseconds (12.12 format) with given VCSEL period
  // assumes fast_osc_frequency has been read and stored
  // based on VL53L1_calc_macro_period_us()
  calcMacroPeriod: function(vcsel_period) {
    // from VL53L1_calc_pll_period_us()
    // fast osc frequency in 4.12 format; PLL period in 0.24 format
    var pll_period_us = (0x01 << 30) / this.fast_osc_frequency;

    // from VL53L1_decode_vcsel_period()
    var vcsel_period_pclks = (vcsel_period + 1) << 1;

    // VL53L1_MACRO_PERIOD_VCSEL_PERIODS = 2304
    var macro_period_us = 2304 * pll_period_us;
    macro_period_us >>= 6;
    macro_period_us *= vcsel_period_pclks;
    macro_period_us >>= 6;

    return macro_period_us;
  },
  readReg: async function(addr16) {
    await this.i2cSlave.writeBytes([addr16 >>> 8, addr16 & 0xff]);
    var dat = await this.i2cSlave.readBytes(1);
    return dat;
  },
  readReg16Bit: async function(addr16) {
    await this.i2cSlave.writeBytes([addr16 >>> 8, addr16 & 0xff]);
    var dat = await this.i2cSlave.readBytes(2);
    var ans = (dat[0] << 8) + dat[1];
    return ans;
  },
  writeReg: async function(addr16, dat8) {
    await this.i2cSlave.writeBytes([addr16 >>> 8, addr16 & 0xff, dat8 & 0xff]);
  },
  writeReg16Bit: async function(addr16, dat16) {
    await this.i2cSlave.writeBytes([
      addr16 >>> 8,
      addr16 & 0xff,
      dat16 >>> 8,
      dat16 & 0xff
    ]);
  },
  writeReg32Bit: async function(addr16, dat32) {
    await this.i2cSlave.writeBytes([
      addr16 >>> 8,
      addr16 & 0xff,
      dat32 >>> 24,
      (dat32 >>> 16) & 0xff,
      (dat32 >>> 8) & 0xff,
      dat32 & 0xff
    ]);
  },
  // Convert count rate from fixed point 9.7 format to float
  countRateFixedToFloat: function(count_rate_fixed) {
    return count_rate_fixed / (1 << 7);
  }
};

export default VL53L1X;
